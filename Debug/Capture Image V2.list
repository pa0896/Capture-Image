
Capture Image V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053a0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08005458  08005458  00006458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005930  08005930  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005930  08005930  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005930  08005930  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005930  08005930  00006930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005934  08005934  00006934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005938  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004198  2000005c  08005994  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041f4  08005994  000071f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167af  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da9  00000000  00000000  0001d833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  000205e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f70  00000000  00000000  00021988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179dc  00000000  00000000  000228f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189cc  00000000  00000000  0003a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000942d5  00000000  00000000  00052ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  000e6fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ebc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005440 	.word	0x08005440

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08005440 	.word	0x08005440

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 fbce 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f820 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 f96e 	bl	80006ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000410:	f000 f864 	bl	80004dc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000414:	f000 f8a2 	bl	800055c <MX_SPI2_Init>
  MX_TIM6_Init();
 8000418:	f000 f8de 	bl	80005d8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800041c:	f000 f918 	bl	8000650 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000420:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <main+0x44>)
 8000422:	0018      	movs	r0, r3
 8000424:	f003 f972 	bl	800370c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //while(!check_cami2c());
  //check if the spi is working
  //while(!check_camspi());
  i2c_config();
 8000428:	f004 f928 	bl	800467c <i2c_config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13))
 800042c:	2380      	movs	r3, #128	@ 0x80
 800042e:	019b      	lsls	r3, r3, #6
 8000430:	4a05      	ldr	r2, [pc, #20]	@ (8000448 <main+0x48>)
 8000432:	0019      	movs	r1, r3
 8000434:	0010      	movs	r0, r2
 8000436:	f000 fe77 	bl	8001128 <HAL_GPIO_ReadPin>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d1f6      	bne.n	800042c <main+0x2c>
		  ov2640_capture();
 800043e:	f004 fabf 	bl	80049c0 <ov2640_capture>
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13))
 8000442:	e7f3      	b.n	800042c <main+0x2c>
 8000444:	20000130 	.word	0x20000130
 8000448:	50000800 	.word	0x50000800

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b093      	sub	sp, #76	@ 0x4c
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	2414      	movs	r4, #20
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	2334      	movs	r3, #52	@ 0x34
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f004 fb71 	bl	8004b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	0018      	movs	r0, r3
 8000466:	2310      	movs	r3, #16
 8000468:	001a      	movs	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	f004 fb6a 	bl	8004b44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000470:	2380      	movs	r3, #128	@ 0x80
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fb97 	bl	8001ba8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2202      	movs	r2, #2
 800047e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2280      	movs	r2, #128	@ 0x80
 8000484:	0052      	lsls	r2, r2, #1
 8000486:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2240      	movs	r2, #64	@ 0x40
 8000492:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	193b      	adds	r3, r7, r4
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fbcf 	bl	8001c40 <HAL_RCC_OscConfig>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004a6:	f000 f985 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2207      	movs	r2, #7
 80004ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2100      	movs	r1, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 feca 	bl	8002260 <HAL_RCC_ClockConfig>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004d0:	f000 f970 	bl	80007b4 <Error_Handler>
  }
}
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b013      	add	sp, #76	@ 0x4c
 80004da:	bd90      	pop	{r4, r7, pc}

080004dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_I2C1_Init+0x74>)
 80004e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000554 <MX_I2C1_Init+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_I2C1_Init+0x74>)
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <MX_I2C1_Init+0x7c>)
 80004ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <MX_I2C1_Init+0x74>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_I2C1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000516:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <MX_I2C1_Init+0x74>)
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fe3f 	bl	800119c <HAL_I2C_Init>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000522:	f000 f947 	bl	80007b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <MX_I2C1_Init+0x74>)
 8000528:	2100      	movs	r1, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f001 faa4 	bl	8001a78 <HAL_I2CEx_ConfigAnalogFilter>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000534:	f000 f93e 	bl	80007b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000538:	4b05      	ldr	r3, [pc, #20]	@ (8000550 <MX_I2C1_Init+0x74>)
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fae7 	bl	8001b10 <HAL_I2CEx_ConfigDigitalFilter>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f935 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000078 	.word	0x20000078
 8000554:	40005400 	.word	0x40005400
 8000558:	00503d58 	.word	0x00503d58

0800055c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_SPI2_Init+0x74>)
 8000562:	4a1c      	ldr	r2, [pc, #112]	@ (80005d4 <MX_SPI2_Init+0x78>)
 8000564:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000566:	4b1a      	ldr	r3, [pc, #104]	@ (80005d0 <MX_SPI2_Init+0x74>)
 8000568:	2282      	movs	r2, #130	@ 0x82
 800056a:	0052      	lsls	r2, r2, #1
 800056c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <MX_SPI2_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000574:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <MX_SPI2_Init+0x74>)
 8000576:	22e0      	movs	r2, #224	@ 0xe0
 8000578:	00d2      	lsls	r2, r2, #3
 800057a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <MX_SPI2_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <MX_SPI2_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_SPI2_Init+0x74>)
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	0092      	lsls	r2, r2, #2
 800058e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_SPI2_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_SPI2_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_SPI2_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <MX_SPI2_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_SPI2_Init+0x74>)
 80005aa:	2207      	movs	r2, #7
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <MX_SPI2_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_SPI2_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <MX_SPI2_Init+0x74>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 f92d 	bl	800281c <HAL_SPI_Init>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005c6:	f000 f8f5 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000cc 	.word	0x200000cc
 80005d4:	40003800 	.word	0x40003800

080005d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	230c      	movs	r3, #12
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f004 faac 	bl	8004b44 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_TIM6_Init+0x6c>)
 80005ee:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <MX_TIM6_Init+0x70>)
 80005f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <MX_TIM6_Init+0x6c>)
 80005f4:	220f      	movs	r2, #15
 80005f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_TIM6_Init+0x6c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <MX_TIM6_Init+0x6c>)
 8000600:	4a12      	ldr	r2, [pc, #72]	@ (800064c <MX_TIM6_Init+0x74>)
 8000602:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_TIM6_Init+0x6c>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <MX_TIM6_Init+0x6c>)
 800060c:	0018      	movs	r0, r3
 800060e:	f003 f825 	bl	800365c <HAL_TIM_Base_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000616:	f000 f8cd 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000626:	1d3a      	adds	r2, r7, #4
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_TIM6_Init+0x6c>)
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f003 f93f 	bl	80038b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000636:	f000 f8bd 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b004      	add	sp, #16
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	20000130 	.word	0x20000130
 8000648:	40001000 	.word	0x40001000
 800064c:	0000ffff 	.word	0x0000ffff

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000656:	4a24      	ldr	r2, [pc, #144]	@ (80006e8 <MX_USART2_UART_Init+0x98>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 800065c:	22e1      	movs	r2, #225	@ 0xe1
 800065e:	0252      	lsls	r2, r2, #9
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 8000694:	2200      	movs	r2, #0
 8000696:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 800069a:	0018      	movs	r0, r3
 800069c:	f003 f970 	bl	8003980 <HAL_UART_Init>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006a4:	f000 f886 	bl	80007b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	0018      	movs	r0, r3
 80006ae:	f003 fe73 	bl	8004398 <HAL_UARTEx_SetTxFifoThreshold>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006b6:	f000 f87d 	bl	80007b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 80006bc:	2100      	movs	r1, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f003 feaa 	bl	8004418 <HAL_UARTEx_SetRxFifoThreshold>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006c8:	f000 f874 	bl	80007b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <MX_USART2_UART_Init+0x94>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f003 fe28 	bl	8004324 <HAL_UARTEx_DisableFifoMode>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006d8:	f000 f86c 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	2000017c 	.word	0x2000017c
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	240c      	movs	r4, #12
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2314      	movs	r3, #20
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f004 fa21 	bl	8004b44 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000706:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000708:	2104      	movs	r1, #4
 800070a:	430a      	orrs	r2, r1
 800070c:	635a      	str	r2, [r3, #52]	@ 0x34
 800070e:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000712:	2204      	movs	r2, #4
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
 8000726:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000738:	2102      	movs	r1, #2
 800073a:	430a      	orrs	r2, r1
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
 800073e:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_GPIO_Init+0xbc>)
 8000740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000742:	2202      	movs	r2, #2
 8000744:	4013      	ands	r3, r2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800074a:	2380      	movs	r3, #128	@ 0x80
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	4817      	ldr	r0, [pc, #92]	@ (80007ac <MX_GPIO_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	0019      	movs	r1, r3
 8000754:	f000 fd05 	bl	8001162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	0192      	lsls	r2, r2, #6
 800075e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800076c:	193b      	adds	r3, r7, r4
 800076e:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f000 fb74 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000778:	0021      	movs	r1, r4
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	0152      	lsls	r2, r2, #5
 8000780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2201      	movs	r2, #1
 8000786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	187b      	adds	r3, r7, r1
 8000796:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <MX_GPIO_Init+0xc0>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f000 fb60 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b009      	add	sp, #36	@ 0x24
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	50000400 	.word	0x50000400
 80007b0:	50000800 	.word	0x50000800

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x44>)
 80007c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_MspInit+0x44>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_MspInit+0x44>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_MspInit+0x44>)
 80007e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <HAL_MspInit+0x44>)
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	0549      	lsls	r1, r1, #21
 80007e8:	430a      	orrs	r2, r1
 80007ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007ec:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <HAL_MspInit+0x44>)
 80007ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	055b      	lsls	r3, r3, #21
 80007f4:	4013      	ands	r3, r2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b091      	sub	sp, #68	@ 0x44
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	232c      	movs	r3, #44	@ 0x2c
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	0018      	movs	r0, r3
 8000816:	2314      	movs	r3, #20
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f004 f992 	bl	8004b44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	2410      	movs	r4, #16
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	231c      	movs	r3, #28
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f004 f98a 	bl	8004b44 <memset>
  if(hi2c->Instance==I2C1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a23      	ldr	r2, [pc, #140]	@ (80008c4 <HAL_I2C_MspInit+0xbc>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d13f      	bne.n	80008ba <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2220      	movs	r2, #32
 800083e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000846:	193b      	adds	r3, r7, r4
 8000848:	0018      	movs	r0, r3
 800084a:	f001 feb3 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000852:	f7ff ffaf 	bl	80007b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <HAL_I2C_MspInit+0xc0>)
 8000858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <HAL_I2C_MspInit+0xc0>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	635a      	str	r2, [r3, #52]	@ 0x34
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <HAL_I2C_MspInit+0xc0>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800086e:	212c      	movs	r1, #44	@ 0x2c
 8000870:	187b      	adds	r3, r7, r1
 8000872:	22c0      	movs	r2, #192	@ 0xc0
 8000874:	00d2      	lsls	r2, r2, #3
 8000876:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2212      	movs	r2, #18
 800087c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2206      	movs	r2, #6
 800088e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	187a      	adds	r2, r7, r1
 8000892:	23a0      	movs	r3, #160	@ 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fae1 	bl	8000e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_I2C_MspInit+0xc0>)
 80008a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <HAL_I2C_MspInit+0xc0>)
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	0389      	lsls	r1, r1, #14
 80008a8:	430a      	orrs	r2, r1
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_I2C_MspInit+0xc0>)
 80008ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008b0:	2380      	movs	r3, #128	@ 0x80
 80008b2:	039b      	lsls	r3, r3, #14
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b011      	add	sp, #68	@ 0x44
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	40005400 	.word	0x40005400
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08b      	sub	sp, #44	@ 0x2c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	2414      	movs	r4, #20
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	0018      	movs	r0, r3
 80008da:	2314      	movs	r3, #20
 80008dc:	001a      	movs	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	f004 f930 	bl	8004b44 <memset>
  if(hspi->Instance==SPI2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a2c      	ldr	r2, [pc, #176]	@ (800099c <HAL_SPI_MspInit+0xd0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d151      	bne.n	8000992 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008ee:	4b2c      	ldr	r3, [pc, #176]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	01c9      	lsls	r1, r1, #7
 80008f8:	430a      	orrs	r2, r1
 80008fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008fc:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 80008fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	01db      	lsls	r3, r3, #7
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800090e:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 8000910:	2104      	movs	r1, #4
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800091a:	2204      	movs	r2, #4
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000926:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	@ 0x34
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <HAL_SPI_MspInit+0xd4>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PA0     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	220c      	movs	r2, #12
 800093e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2202      	movs	r2, #2
 8000944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2201      	movs	r2, #1
 8000956:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	193b      	adds	r3, r7, r4
 800095a:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <HAL_SPI_MspInit+0xd8>)
 800095c:	0019      	movs	r1, r3
 800095e:	0010      	movs	r0, r2
 8000960:	f000 fa7e 	bl	8000e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000964:	0021      	movs	r1, r4
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2202      	movs	r2, #2
 8000970:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	187a      	adds	r2, r7, r1
 8000986:	23a0      	movs	r3, #160	@ 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fa67 	bl	8000e60 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b00b      	add	sp, #44	@ 0x2c
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	40003800 	.word	0x40003800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	50000800 	.word	0x50000800

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a09      	ldr	r2, [pc, #36]	@ (80009dc <HAL_TIM_Base_MspInit+0x34>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d10b      	bne.n	80009d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009c0:	2110      	movs	r1, #16
 80009c2:	430a      	orrs	r2, r1
 80009c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_TIM_Base_MspInit+0x38>)
 80009c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009ca:	2210      	movs	r2, #16
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	40001000 	.word	0x40001000
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b091      	sub	sp, #68	@ 0x44
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	232c      	movs	r3, #44	@ 0x2c
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	0018      	movs	r0, r3
 80009f2:	2314      	movs	r3, #20
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f004 f8a4 	bl	8004b44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	2410      	movs	r4, #16
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	0018      	movs	r0, r3
 8000a02:	231c      	movs	r3, #28
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f004 f89c 	bl	8004b44 <memset>
  if(huart->Instance==USART2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <HAL_UART_MspInit+0xb8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d13e      	bne.n	8000a94 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2202      	movs	r2, #2
 8000a1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 fdc5 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a2e:	f7ff fec1 	bl	80007b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_UART_MspInit+0xbc>)
 8000a34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <HAL_UART_MspInit+0xbc>)
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0289      	lsls	r1, r1, #10
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <HAL_UART_MspInit+0xbc>)
 8000a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	029b      	lsls	r3, r3, #10
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <HAL_UART_MspInit+0xbc>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <HAL_UART_MspInit+0xbc>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_UART_MspInit+0xbc>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a66:	212c      	movs	r1, #44	@ 0x2c
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2202      	movs	r2, #2
 8000a72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2201      	movs	r2, #1
 8000a84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	187a      	adds	r2, r7, r1
 8000a88:	23a0      	movs	r3, #160	@ 0xa0
 8000a8a:	05db      	lsls	r3, r3, #23
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f9e6 	bl	8000e60 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b011      	add	sp, #68	@ 0x44
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f8d4 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f004 f824 	bl	8004b54 <__errno>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	425b      	negs	r3, r3
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	18d2      	adds	r2, r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <_sbrk+0x64>)
 8000b28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b006      	add	sp, #24
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20009000 	.word	0x20009000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	20000210 	.word	0x20000210
 8000b40:	200041f8 	.word	0x200041f8

08000b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b54:	f7ff fff6 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7e:	f003 ffef 	bl	8004b60 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b82:	f7ff fc3d 	bl	8000400 <main>

08000b86 <LoopForever>:

LoopForever:
  b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b94:	08005938 	.word	0x08005938
  ldr r2, =_sbss
 8000b98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b9c:	200041f4 	.word	0x200041f4

08000ba0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <HAL_Init+0x3c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_Init+0x3c>)
 8000bb6:	2180      	movs	r1, #128	@ 0x80
 8000bb8:	0049      	lsls	r1, r1, #1
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f810 	bl	8000be4 <HAL_InitTick>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	e001      	b.n	8000bd4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fdf6 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c6c <HAL_InitTick+0x88>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d02b      	beq.n	8000c54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <HAL_InitTick+0x8c>)
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <HAL_InitTick+0x88>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	0019      	movs	r1, r3
 8000c06:	23fa      	movs	r3, #250	@ 0xfa
 8000c08:	0098      	lsls	r0, r3, #2
 8000c0a:	f7ff fa83 	bl	8000114 <__udivsi3>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	0019      	movs	r1, r3
 8000c12:	0020      	movs	r0, r4
 8000c14:	f7ff fa7e 	bl	8000114 <__udivsi3>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f913 	bl	8000e46 <HAL_SYSTICK_Config>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d112      	bne.n	8000c4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d80a      	bhi.n	8000c40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	425b      	negs	r3, r3
 8000c30:	2200      	movs	r2, #0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f8f2 	bl	8000e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <HAL_InitTick+0x90>)
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e00d      	b.n	8000c5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c40:	230f      	movs	r3, #15
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e008      	b.n	8000c5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e003      	b.n	8000c5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c54:	230f      	movs	r3, #15
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	781b      	ldrb	r3, [r3, #0]
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b005      	add	sp, #20
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	001a      	movs	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	18d2      	adds	r2, r2, r3
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000214 	.word	0x20000214

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	@ (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	20000214 	.word	0x20000214

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff fff0 	bl	8000c9c <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	001a      	movs	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	189b      	adds	r3, r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	f7ff ffe0 	bl	8000c9c <HAL_GetTick>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	0002      	movs	r2, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d0c:	d828      	bhi.n	8000d60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000dcc <__NVIC_SetPriority+0xd4>)
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	33c0      	adds	r3, #192	@ 0xc0
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	589b      	ldr	r3, [r3, r2]
 8000d1e:	1dfa      	adds	r2, r7, #7
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	0011      	movs	r1, r2
 8000d24:	2203      	movs	r2, #3
 8000d26:	400a      	ands	r2, r1
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	21ff      	movs	r1, #255	@ 0xff
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	000a      	movs	r2, r1
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	401a      	ands	r2, r3
 8000d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	22ff      	movs	r2, #255	@ 0xff
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	0018      	movs	r0, r3
 8000d44:	2303      	movs	r3, #3
 8000d46:	4003      	ands	r3, r0
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4c:	481f      	ldr	r0, [pc, #124]	@ (8000dcc <__NVIC_SetPriority+0xd4>)
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	430a      	orrs	r2, r1
 8000d58:	33c0      	adds	r3, #192	@ 0xc0
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d5e:	e031      	b.n	8000dc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <__NVIC_SetPriority+0xd8>)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0019      	movs	r1, r3
 8000d68:	230f      	movs	r3, #15
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	3b08      	subs	r3, #8
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3306      	adds	r3, #6
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	3304      	adds	r3, #4
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	1dfa      	adds	r2, r7, #7
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	2203      	movs	r2, #3
 8000d82:	400a      	ands	r2, r1
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	21ff      	movs	r1, #255	@ 0xff
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	43d2      	mvns	r2, r2
 8000d8e:	401a      	ands	r2, r3
 8000d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	22ff      	movs	r2, #255	@ 0xff
 8000d98:	401a      	ands	r2, r3
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2303      	movs	r3, #3
 8000da2:	4003      	ands	r3, r0
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <__NVIC_SetPriority+0xd8>)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	001c      	movs	r4, r3
 8000db0:	230f      	movs	r3, #15
 8000db2:	4023      	ands	r3, r4
 8000db4:	3b08      	subs	r3, #8
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	430a      	orrs	r2, r1
 8000dba:	3306      	adds	r3, #6
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	18c3      	adds	r3, r0, r3
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b003      	add	sp, #12
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	2380      	movs	r3, #128	@ 0x80
 8000de2:	045b      	lsls	r3, r3, #17
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d301      	bcc.n	8000dec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de8:	2301      	movs	r3, #1
 8000dea:	e010      	b.n	8000e0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dec:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <SysTick_Config+0x44>)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	3a01      	subs	r2, #1
 8000df2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df4:	2301      	movs	r3, #1
 8000df6:	425b      	negs	r3, r3
 8000df8:	2103      	movs	r1, #3
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff ff7c 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <SysTick_Config+0x44>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <SysTick_Config+0x44>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	210f      	movs	r1, #15
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	1c02      	adds	r2, r0, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff ffbf 	bl	8000dd4 <SysTick_Config>
 8000e56:	0003      	movs	r3, r0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	e147      	b.n	8001100 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d100      	bne.n	8000e88 <HAL_GPIO_Init+0x28>
 8000e86:	e138      	b.n	80010fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d005      	beq.n	8000ea0 <HAL_GPIO_Init+0x40>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	2201      	movs	r2, #1
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2203      	movs	r2, #3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d017      	beq.n	8000f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	58d3      	ldr	r3, [r2, r3]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2107      	movs	r1, #7
 8000f76:	400b      	ands	r3, r1
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	6939      	ldr	r1, [r7, #16]
 8000f90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	23c0      	movs	r3, #192	@ 0xc0
 8000fcc:	029b      	lsls	r3, r3, #10
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_GPIO_Init+0x174>
 8000fd2:	e092      	b.n	80010fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fd4:	4a50      	ldr	r2, [pc, #320]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3318      	adds	r3, #24
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	589b      	ldr	r3, [r3, r2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	220f      	movs	r2, #15
 8000fec:	409a      	lsls	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	23a0      	movs	r3, #160	@ 0xa0
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x1ca>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a45      	ldr	r2, [pc, #276]	@ (800111c <HAL_GPIO_Init+0x2bc>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x1c6>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a44      	ldr	r2, [pc, #272]	@ (8001120 <HAL_GPIO_Init+0x2c0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x1c2>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a43      	ldr	r2, [pc, #268]	@ (8001124 <HAL_GPIO_Init+0x2c4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x1be>
 800101a:	2303      	movs	r3, #3
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x1cc>
 800101e:	2305      	movs	r3, #5
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x1cc>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x1cc>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x1cc>
 800102a:	2300      	movs	r3, #0
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	2103      	movs	r1, #3
 8001030:	400a      	ands	r2, r1
 8001032:	00d2      	lsls	r2, r2, #3
 8001034:	4093      	lsls	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800103c:	4936      	ldr	r1, [pc, #216]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3318      	adds	r3, #24
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800104a:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	2380      	movs	r3, #128	@ 0x80
 8001060:	035b      	lsls	r3, r3, #13
 8001062:	4013      	ands	r3, r2
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800106e:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43da      	mvns	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	039b      	lsls	r3, r3, #14
 800108c:	4013      	ands	r3, r2
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 80010a0:	2384      	movs	r3, #132	@ 0x84
 80010a2:	58d3      	ldr	r3, [r2, r3]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	029b      	lsls	r3, r3, #10
 80010b8:	4013      	ands	r3, r2
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c4:	4914      	ldr	r1, [pc, #80]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 80010c6:	2284      	movs	r2, #132	@ 0x84
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 80010ce:	2380      	movs	r3, #128	@ 0x80
 80010d0:	58d3      	ldr	r3, [r2, r3]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43da      	mvns	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	4013      	ands	r3, r2
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f2:	4909      	ldr	r1, [pc, #36]	@ (8001118 <HAL_GPIO_Init+0x2b8>)
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	40da      	lsrs	r2, r3
 8001108:	1e13      	subs	r3, r2, #0
 800110a:	d000      	beq.n	800110e <HAL_GPIO_Init+0x2ae>
 800110c:	e6b0      	b.n	8000e70 <HAL_GPIO_Init+0x10>
  }
}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b006      	add	sp, #24
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021800 	.word	0x40021800
 800111c:	50000400 	.word	0x50000400
 8001120:	50000800 	.word	0x50000800
 8001124:	50000c00 	.word	0x50000c00

08001128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	000a      	movs	r2, r1
 8001132:	1cbb      	adds	r3, r7, #2
 8001134:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	1cba      	adds	r2, r7, #2
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	4013      	ands	r3, r2
 8001140:	d004      	beq.n	800114c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001142:	230f      	movs	r3, #15
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e003      	b.n	8001154 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	781b      	ldrb	r3, [r3, #0]
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	0008      	movs	r0, r1
 800116c:	0011      	movs	r1, r2
 800116e:	1cbb      	adds	r3, r7, #2
 8001170:	1c02      	adds	r2, r0, #0
 8001172:	801a      	strh	r2, [r3, #0]
 8001174:	1c7b      	adds	r3, r7, #1
 8001176:	1c0a      	adds	r2, r1, #0
 8001178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117a:	1c7b      	adds	r3, r7, #1
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001182:	1cbb      	adds	r3, r7, #2
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118a:	e003      	b.n	8001194 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118c:	1cbb      	adds	r3, r7, #2
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e08f      	b.n	80012ce <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2241      	movs	r2, #65	@ 0x41
 80011b2:	5c9b      	ldrb	r3, [r3, r2]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d107      	bne.n	80011ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2240      	movs	r2, #64	@ 0x40
 80011be:	2100      	movs	r1, #0
 80011c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff fb1f 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2241      	movs	r2, #65	@ 0x41
 80011ce:	2124      	movs	r1, #36	@ 0x24
 80011d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	438a      	bics	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	493b      	ldr	r1, [pc, #236]	@ (80012d8 <HAL_I2C_Init+0x13c>)
 80011ec:	400a      	ands	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4938      	ldr	r1, [pc, #224]	@ (80012dc <HAL_I2C_Init+0x140>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d108      	bne.n	800121a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	0209      	lsls	r1, r1, #8
 8001214:	430a      	orrs	r2, r1
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	e007      	b.n	800122a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2184      	movs	r1, #132	@ 0x84
 8001224:	0209      	lsls	r1, r1, #8
 8001226:	430a      	orrs	r2, r1
 8001228:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d109      	bne.n	8001246 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	0109      	lsls	r1, r1, #4
 8001240:	430a      	orrs	r2, r1
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	e007      	b.n	8001256 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4923      	ldr	r1, [pc, #140]	@ (80012e0 <HAL_I2C_Init+0x144>)
 8001252:	400a      	ands	r2, r1
 8001254:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4920      	ldr	r1, [pc, #128]	@ (80012e4 <HAL_I2C_Init+0x148>)
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	491a      	ldr	r1, [pc, #104]	@ (80012dc <HAL_I2C_Init+0x140>)
 8001272:	400a      	ands	r2, r1
 8001274:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	431a      	orrs	r2, r3
 8001280:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69d9      	ldr	r1, [r3, #28]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1a      	ldr	r2, [r3, #32]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2101      	movs	r1, #1
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2241      	movs	r2, #65	@ 0x41
 80012ba:	2120      	movs	r1, #32
 80012bc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2242      	movs	r2, #66	@ 0x42
 80012c8:	2100      	movs	r1, #0
 80012ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	f0ffffff 	.word	0xf0ffffff
 80012dc:	ffff7fff 	.word	0xffff7fff
 80012e0:	fffff7ff 	.word	0xfffff7ff
 80012e4:	02008000 	.word	0x02008000

080012e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	000c      	movs	r4, r1
 80012f2:	0010      	movs	r0, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	230a      	movs	r3, #10
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	1c22      	adds	r2, r4, #0
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	2308      	movs	r3, #8
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	1c02      	adds	r2, r0, #0
 8001304:	801a      	strh	r2, [r3, #0]
 8001306:	1dbb      	adds	r3, r7, #6
 8001308:	1c0a      	adds	r2, r1, #0
 800130a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2241      	movs	r2, #65	@ 0x41
 8001310:	5c9b      	ldrb	r3, [r3, r2]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b20      	cmp	r3, #32
 8001316:	d000      	beq.n	800131a <HAL_I2C_Mem_Write+0x32>
 8001318:	e10c      	b.n	8001534 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800131a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <HAL_I2C_Mem_Write+0x42>
 8001320:	232c      	movs	r3, #44	@ 0x2c
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0ff      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2240      	movs	r2, #64	@ 0x40
 800133a:	5c9b      	ldrb	r3, [r3, r2]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_I2C_Mem_Write+0x5c>
 8001340:	2302      	movs	r3, #2
 8001342:	e0f8      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2240      	movs	r2, #64	@ 0x40
 8001348:	2101      	movs	r1, #1
 800134a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800134c:	f7ff fca6 	bl	8000c9c <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	0219      	lsls	r1, r3, #8
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2319      	movs	r3, #25
 8001360:	2201      	movs	r2, #1
 8001362:	f000 f975 	bl	8001650 <I2C_WaitOnFlagUntilTimeout>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e0e3      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2241      	movs	r2, #65	@ 0x41
 8001372:	2121      	movs	r1, #33	@ 0x21
 8001374:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2242      	movs	r2, #66	@ 0x42
 800137a:	2140      	movs	r1, #64	@ 0x40
 800137c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001388:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	222c      	movs	r2, #44	@ 0x2c
 800138e:	18ba      	adds	r2, r7, r2
 8001390:	8812      	ldrh	r2, [r2, #0]
 8001392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800139a:	1dbb      	adds	r3, r7, #6
 800139c:	881c      	ldrh	r4, [r3, #0]
 800139e:	2308      	movs	r3, #8
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	881a      	ldrh	r2, [r3, #0]
 80013a4:	230a      	movs	r3, #10
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	8819      	ldrh	r1, [r3, #0]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	0023      	movs	r3, r4
 80013b6:	f000 f8c5 	bl	8001544 <I2C_RequestMemoryWrite>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d005      	beq.n	80013ca <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2240      	movs	r2, #64	@ 0x40
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0b5      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	2bff      	cmp	r3, #255	@ 0xff
 80013d2:	d911      	bls.n	80013f8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	22ff      	movs	r2, #255	@ 0xff
 80013d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	045c      	lsls	r4, r3, #17
 80013e4:	230a      	movs	r3, #10
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	8819      	ldrh	r1, [r3, #0]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	0023      	movs	r3, r4
 80013f2:	f000 fb07 	bl	8001a04 <I2C_TransferConfig>
 80013f6:	e012      	b.n	800141e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001406:	b2da      	uxtb	r2, r3
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	049c      	lsls	r4, r3, #18
 800140c:	230a      	movs	r3, #10
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	8819      	ldrh	r1, [r3, #0]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	2300      	movs	r3, #0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	0023      	movs	r3, r4
 800141a:	f000 faf3 	bl	8001a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	0018      	movs	r0, r3
 8001426:	f000 f96b 	bl	8001700 <I2C_WaitOnTXISFlagUntilTimeout>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e081      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800144c:	b29b      	uxth	r3, r3
 800144e:	3b01      	subs	r3, #1
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145a:	3b01      	subs	r3, #1
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001466:	b29b      	uxth	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d03a      	beq.n	80014e2 <HAL_I2C_Mem_Write+0x1fa>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001470:	2b00      	cmp	r3, #0
 8001472:	d136      	bne.n	80014e2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	0013      	movs	r3, r2
 800147e:	2200      	movs	r2, #0
 8001480:	2180      	movs	r1, #128	@ 0x80
 8001482:	f000 f8e5 	bl	8001650 <I2C_WaitOnFlagUntilTimeout>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e053      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001492:	b29b      	uxth	r3, r3
 8001494:	2bff      	cmp	r3, #255	@ 0xff
 8001496:	d911      	bls.n	80014bc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	22ff      	movs	r2, #255	@ 0xff
 800149c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	045c      	lsls	r4, r3, #17
 80014a8:	230a      	movs	r3, #10
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	8819      	ldrh	r1, [r3, #0]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	2300      	movs	r3, #0
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	0023      	movs	r3, r4
 80014b6:	f000 faa5 	bl	8001a04 <I2C_TransferConfig>
 80014ba:	e012      	b.n	80014e2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	049c      	lsls	r4, r3, #18
 80014d0:	230a      	movs	r3, #10
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	8819      	ldrh	r1, [r3, #0]
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	0023      	movs	r3, r4
 80014de:	f000 fa91 	bl	8001a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d198      	bne.n	800141e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 f94a 	bl	800178c <I2C_WaitOnSTOPFlagUntilTimeout>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e01a      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2220      	movs	r2, #32
 8001506:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	490b      	ldr	r1, [pc, #44]	@ (8001540 <HAL_I2C_Mem_Write+0x258>)
 8001514:	400a      	ands	r2, r1
 8001516:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2241      	movs	r2, #65	@ 0x41
 800151c:	2120      	movs	r1, #32
 800151e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2242      	movs	r2, #66	@ 0x42
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2240      	movs	r2, #64	@ 0x40
 800152c:	2100      	movs	r1, #0
 800152e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	e000      	b.n	8001536 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001534:	2302      	movs	r3, #2
  }
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b007      	add	sp, #28
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	fe00e800 	.word	0xfe00e800

08001544 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af02      	add	r7, sp, #8
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	000c      	movs	r4, r1
 800154e:	0010      	movs	r0, r2
 8001550:	0019      	movs	r1, r3
 8001552:	250a      	movs	r5, #10
 8001554:	197b      	adds	r3, r7, r5
 8001556:	1c22      	adds	r2, r4, #0
 8001558:	801a      	strh	r2, [r3, #0]
 800155a:	2308      	movs	r3, #8
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	1c02      	adds	r2, r0, #0
 8001560:	801a      	strh	r2, [r3, #0]
 8001562:	1dbb      	adds	r3, r7, #6
 8001564:	1c0a      	adds	r2, r1, #0
 8001566:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	045c      	lsls	r4, r3, #17
 8001572:	197b      	adds	r3, r7, r5
 8001574:	8819      	ldrh	r1, [r3, #0]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <I2C_RequestMemoryWrite+0xc4>)
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	0023      	movs	r3, r4
 800157e:	f000 fa41 	bl	8001a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0018      	movs	r0, r3
 800158a:	f000 f8b9 	bl	8001700 <I2C_WaitOnTXISFlagUntilTimeout>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e033      	b.n	80015fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001596:	1dbb      	adds	r3, r7, #6
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800159e:	2308      	movs	r3, #8
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ac:	e019      	b.n	80015e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015ae:	2308      	movs	r3, #8
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c2:	6a39      	ldr	r1, [r7, #32]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 f89a 	bl	8001700 <I2C_WaitOnTXISFlagUntilTimeout>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e014      	b.n	80015fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015d4:	2308      	movs	r3, #8
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80015e2:	6a3a      	ldr	r2, [r7, #32]
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	0013      	movs	r3, r2
 80015ec:	2200      	movs	r2, #0
 80015ee:	2180      	movs	r1, #128	@ 0x80
 80015f0:	f000 f82e 	bl	8001650 <I2C_WaitOnFlagUntilTimeout>
 80015f4:	1e03      	subs	r3, r0, #0
 80015f6:	d001      	beq.n	80015fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bdb0      	pop	{r4, r5, r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	80002000 	.word	0x80002000

0800160c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d103      	bne.n	800162a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2201      	movs	r2, #1
 8001632:	4013      	ands	r3, r2
 8001634:	2b01      	cmp	r3, #1
 8001636:	d007      	beq.n	8001648 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699a      	ldr	r2, [r3, #24]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2101      	movs	r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	619a      	str	r2, [r3, #24]
  }
}
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001660:	e03a      	b.n	80016d8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0018      	movs	r0, r3
 800166a:	f000 f8d3 	bl	8001814 <I2C_IsErrorOccurred>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e040      	b.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	d02d      	beq.n	80016d8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800167c:	f7ff fb0e 	bl	8000c9c <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d302      	bcc.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x42>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d122      	bne.n	80016d8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	4013      	ands	r3, r2
 800169c:	68ba      	ldr	r2, [r7, #8]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	425a      	negs	r2, r3
 80016a2:	4153      	adcs	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	001a      	movs	r2, r3
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d113      	bne.n	80016d8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b4:	2220      	movs	r2, #32
 80016b6:	431a      	orrs	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2241      	movs	r2, #65	@ 0x41
 80016c0:	2120      	movs	r1, #32
 80016c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2242      	movs	r2, #66	@ 0x42
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2240      	movs	r2, #64	@ 0x40
 80016d0:	2100      	movs	r1, #0
 80016d2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e00f      	b.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4013      	ands	r3, r2
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	425a      	negs	r2, r3
 80016e8:	4153      	adcs	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	001a      	movs	r2, r3
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d0b5      	beq.n	8001662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b004      	add	sp, #16
 80016fe:	bd80      	pop	{r7, pc}

08001700 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800170c:	e032      	b.n	8001774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f87d 	bl	8001814 <I2C_IsErrorOccurred>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e030      	b.n	8001784 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3301      	adds	r3, #1
 8001726:	d025      	beq.n	8001774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001728:	f7ff fab8 	bl	8000c9c <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d302      	bcc.n	800173e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d11a      	bne.n	8001774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	2b02      	cmp	r3, #2
 800174a:	d013      	beq.n	8001774 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001750:	2220      	movs	r2, #32
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2241      	movs	r2, #65	@ 0x41
 800175c:	2120      	movs	r1, #32
 800175e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2242      	movs	r2, #66	@ 0x42
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2240      	movs	r2, #64	@ 0x40
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e007      	b.n	8001784 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2202      	movs	r2, #2
 800177c:	4013      	ands	r3, r2
 800177e:	2b02      	cmp	r3, #2
 8001780:	d1c5      	bne.n	800170e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}

0800178c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001798:	e02f      	b.n	80017fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f000 f837 	bl	8001814 <I2C_IsErrorOccurred>
 80017a6:	1e03      	subs	r3, r0, #0
 80017a8:	d001      	beq.n	80017ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e02d      	b.n	800180a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ae:	f7ff fa75 	bl	8000c9c <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d302      	bcc.n	80017c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d11a      	bne.n	80017fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2220      	movs	r2, #32
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	d013      	beq.n	80017fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	2220      	movs	r2, #32
 80017d8:	431a      	orrs	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2241      	movs	r2, #65	@ 0x41
 80017e2:	2120      	movs	r1, #32
 80017e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2242      	movs	r2, #66	@ 0x42
 80017ea:	2100      	movs	r1, #0
 80017ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2240      	movs	r2, #64	@ 0x40
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e007      	b.n	800180a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2220      	movs	r2, #32
 8001802:	4013      	ands	r3, r2
 8001804:	2b20      	cmp	r3, #32
 8001806:	d1c8      	bne.n	800179a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b004      	add	sp, #16
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001820:	2327      	movs	r3, #39	@ 0x27
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2210      	movs	r2, #16
 800183c:	4013      	ands	r3, r2
 800183e:	d100      	bne.n	8001842 <I2C_IsErrorOccurred+0x2e>
 8001840:	e079      	b.n	8001936 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2210      	movs	r2, #16
 8001848:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800184a:	e057      	b.n	80018fc <I2C_IsErrorOccurred+0xe8>
 800184c:	2227      	movs	r2, #39	@ 0x27
 800184e:	18bb      	adds	r3, r7, r2
 8001850:	18ba      	adds	r2, r7, r2
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	d04f      	beq.n	80018fc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800185c:	f7ff fa1e 	bl	8000c9c <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	429a      	cmp	r2, r3
 800186a:	d302      	bcc.n	8001872 <I2C_IsErrorOccurred+0x5e>
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d144      	bne.n	80018fc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	01db      	lsls	r3, r3, #7
 800187c:	4013      	ands	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001880:	2013      	movs	r0, #19
 8001882:	183b      	adds	r3, r7, r0
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	2142      	movs	r1, #66	@ 0x42
 8001888:	5c52      	ldrb	r2, [r2, r1]
 800188a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	401a      	ands	r2, r3
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	429a      	cmp	r2, r3
 800189e:	d126      	bne.n	80018ee <I2C_IsErrorOccurred+0xda>
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	01db      	lsls	r3, r3, #7
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d021      	beq.n	80018ee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80018aa:	183b      	adds	r3, r7, r0
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d01d      	beq.n	80018ee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	01c9      	lsls	r1, r1, #7
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018c4:	f7ff f9ea 	bl	8000c9c <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018cc:	e00f      	b.n	80018ee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018ce:	f7ff f9e5 	bl	8000c9c <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b19      	cmp	r3, #25
 80018da:	d908      	bls.n	80018ee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2220      	movs	r2, #32
 80018e0:	4313      	orrs	r3, r2
 80018e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80018e4:	2327      	movs	r3, #39	@ 0x27
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]

              break;
 80018ec:	e006      	b.n	80018fc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2220      	movs	r2, #32
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b20      	cmp	r3, #32
 80018fa:	d1e8      	bne.n	80018ce <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2220      	movs	r2, #32
 8001904:	4013      	ands	r3, r2
 8001906:	2b20      	cmp	r3, #32
 8001908:	d004      	beq.n	8001914 <I2C_IsErrorOccurred+0x100>
 800190a:	2327      	movs	r3, #39	@ 0x27
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d09b      	beq.n	800184c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001914:	2327      	movs	r3, #39	@ 0x27
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2220      	movs	r2, #32
 8001924:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	2204      	movs	r2, #4
 800192a:	4313      	orrs	r3, r2
 800192c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800192e:	2327      	movs	r3, #39	@ 0x27
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4013      	ands	r3, r2
 8001946:	d00c      	beq.n	8001962 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	2201      	movs	r2, #1
 800194c:	4313      	orrs	r3, r2
 800194e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2280      	movs	r2, #128	@ 0x80
 8001956:	0052      	lsls	r2, r2, #1
 8001958:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800195a:	2327      	movs	r3, #39	@ 0x27
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4013      	ands	r3, r2
 800196a:	d00c      	beq.n	8001986 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	2208      	movs	r2, #8
 8001970:	4313      	orrs	r3, r2
 8001972:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	00d2      	lsls	r2, r2, #3
 800197c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800197e:	2327      	movs	r3, #39	@ 0x27
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d00c      	beq.n	80019aa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	2202      	movs	r2, #2
 8001994:	4313      	orrs	r3, r2
 8001996:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019a2:	2327      	movs	r3, #39	@ 0x27
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80019aa:	2327      	movs	r3, #39	@ 0x27
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01d      	beq.n	80019f0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff fe28 	bl	800160c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	490e      	ldr	r1, [pc, #56]	@ (8001a00 <I2C_IsErrorOccurred+0x1ec>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2241      	movs	r2, #65	@ 0x41
 80019dc:	2120      	movs	r1, #32
 80019de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2242      	movs	r2, #66	@ 0x42
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	2100      	movs	r1, #0
 80019ee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80019f0:	2327      	movs	r3, #39	@ 0x27
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	781b      	ldrb	r3, [r3, #0]
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b00a      	add	sp, #40	@ 0x28
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	fe00e800 	.word	0xfe00e800

08001a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	0008      	movs	r0, r1
 8001a0e:	0011      	movs	r1, r2
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	240a      	movs	r4, #10
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	1c02      	adds	r2, r0, #0
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	2009      	movs	r0, #9
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	1c0a      	adds	r2, r1, #0
 8001a20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	059b      	lsls	r3, r3, #22
 8001a28:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	0419      	lsls	r1, r3, #16
 8001a30:	23ff      	movs	r3, #255	@ 0xff
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a36:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a4e:	0d51      	lsrs	r1, r2, #21
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	00d2      	lsls	r2, r2, #3
 8001a54:	400a      	ands	r2, r1
 8001a56:	4907      	ldr	r1, [pc, #28]	@ (8001a74 <I2C_TransferConfig+0x70>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	43d2      	mvns	r2, r2
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	0011      	movs	r1, r2
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a6a:	46c0      	nop			@ (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b007      	add	sp, #28
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	03ff63ff 	.word	0x03ff63ff

08001a78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2241      	movs	r2, #65	@ 0x41
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d138      	bne.n	8001b00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2240      	movs	r2, #64	@ 0x40
 8001a92:	5c9b      	ldrb	r3, [r3, r2]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e032      	b.n	8001b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2240      	movs	r2, #64	@ 0x40
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2241      	movs	r2, #65	@ 0x41
 8001aa8:	2124      	movs	r1, #36	@ 0x24
 8001aaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4911      	ldr	r1, [pc, #68]	@ (8001b0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2241      	movs	r2, #65	@ 0x41
 8001af0:	2120      	movs	r1, #32
 8001af2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2240      	movs	r2, #64	@ 0x40
 8001af8:	2100      	movs	r1, #0
 8001afa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
  }
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	ffffefff 	.word	0xffffefff

08001b10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2241      	movs	r2, #65	@ 0x41
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d139      	bne.n	8001b9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2240      	movs	r2, #64	@ 0x40
 8001b2a:	5c9b      	ldrb	r3, [r3, r2]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e033      	b.n	8001b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2240      	movs	r2, #64	@ 0x40
 8001b38:	2101      	movs	r1, #1
 8001b3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2241      	movs	r2, #65	@ 0x41
 8001b40:	2124      	movs	r1, #36	@ 0x24
 8001b42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	438a      	bics	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a11      	ldr	r2, [pc, #68]	@ (8001ba4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2241      	movs	r2, #65	@ 0x41
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2240      	movs	r2, #64	@ 0x40
 8001b92:	2100      	movs	r1, #0
 8001b94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
  }
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	fffff0ff 	.word	0xfffff0ff

08001ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	@ (8001c1c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d11f      	bne.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	189b      	adds	r3, r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4912      	ldr	r1, [pc, #72]	@ (8001c24 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7fe fa9a 	bl	8000114 <__udivsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	3301      	adds	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be6:	e008      	b.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e001      	b.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e009      	b.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	401a      	ands	r2, r3
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d0ed      	beq.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b004      	add	sp, #16
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	fffff9ff 	.word	0xfffff9ff
 8001c20:	20000000 	.word	0x20000000
 8001c24:	000f4240 	.word	0x000f4240

08001c28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	23e0      	movs	r3, #224	@ 0xe0
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	4013      	ands	r3, r2
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e2f3      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <HAL_RCC_OscConfig+0x1e>
 8001c5c:	e07c      	b.n	8001d58 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	4bc3      	ldr	r3, [pc, #780]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2238      	movs	r2, #56	@ 0x38
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c68:	4bc0      	ldr	r3, [pc, #768]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	4013      	ands	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3e>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d10b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4bb9      	ldr	r3, [pc, #740]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d062      	beq.n	8001d56 <HAL_RCC_OscConfig+0x116>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d15e      	bne.n	8001d56 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e2ce      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x78>
 8001ca8:	4bb0      	ldr	r3, [pc, #704]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4baf      	ldr	r3, [pc, #700]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	0249      	lsls	r1, r1, #9
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e020      	b.n	8001cfa <HAL_RCC_OscConfig+0xba>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	23a0      	movs	r3, #160	@ 0xa0
 8001cbe:	02db      	lsls	r3, r3, #11
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_RCC_OscConfig+0xa2>
 8001cc4:	4ba9      	ldr	r3, [pc, #676]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4ba8      	ldr	r3, [pc, #672]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001cca:	2180      	movs	r1, #128	@ 0x80
 8001ccc:	02c9      	lsls	r1, r1, #11
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4ba6      	ldr	r3, [pc, #664]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4ba5      	ldr	r3, [pc, #660]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	0249      	lsls	r1, r1, #9
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0xba>
 8001ce2:	4ba2      	ldr	r3, [pc, #648]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4ba1      	ldr	r3, [pc, #644]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	49a1      	ldr	r1, [pc, #644]	@ (8001f70 <HAL_RCC_OscConfig+0x330>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	4b9f      	ldr	r3, [pc, #636]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b9e      	ldr	r3, [pc, #632]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	499f      	ldr	r1, [pc, #636]	@ (8001f74 <HAL_RCC_OscConfig+0x334>)
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d014      	beq.n	8001d2c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ffcb 	bl	8000c9c <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7fe ffc6 	bl	8000c9c <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e28d      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	4b93      	ldr	r3, [pc, #588]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	029b      	lsls	r3, r3, #10
 8001d26:	4013      	ands	r3, r2
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xcc>
 8001d2a:	e015      	b.n	8001d58 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ffb6 	bl	8000c9c <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d36:	f7fe ffb1 	bl	8000c9c <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	@ 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e278      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d48:	4b88      	ldr	r3, [pc, #544]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0xf6>
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d100      	bne.n	8001d64 <HAL_RCC_OscConfig+0x124>
 8001d62:	e099      	b.n	8001e98 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d64:	4b81      	ldr	r3, [pc, #516]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2238      	movs	r2, #56	@ 0x38
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2203      	movs	r2, #3
 8001d74:	4013      	ands	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d102      	bne.n	8001d84 <HAL_RCC_OscConfig+0x144>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d002      	beq.n	8001d8a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d135      	bne.n	8001df6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d8a:	4b78      	ldr	r3, [pc, #480]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4013      	ands	r3, r2
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x162>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e24b      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b72      	ldr	r3, [pc, #456]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a74      	ldr	r2, [pc, #464]	@ (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d112      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f7c <HAL_RCC_OscConfig+0x33c>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001dd2:	4b66      	ldr	r3, [pc, #408]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	2207      	movs	r2, #7
 8001dda:	4013      	ands	r3, r2
 8001ddc:	4a68      	ldr	r2, [pc, #416]	@ (8001f80 <HAL_RCC_OscConfig+0x340>)
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	4b68      	ldr	r3, [pc, #416]	@ (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001de2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001de4:	4b68      	ldr	r3, [pc, #416]	@ (8001f88 <HAL_RCC_OscConfig+0x348>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7fe fefb 	bl	8000be4 <HAL_InitTick>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d051      	beq.n	8001e96 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e221      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d030      	beq.n	8001e60 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a5e      	ldr	r2, [pc, #376]	@ (8001f7c <HAL_RCC_OscConfig+0x33c>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b57      	ldr	r3, [pc, #348]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e12:	4b56      	ldr	r3, [pc, #344]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b55      	ldr	r3, [pc, #340]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	0049      	lsls	r1, r1, #1
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe ff3c 	bl	8000c9c <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7fe ff37 	bl	8000c9c <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1fe      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e48:	4b48      	ldr	r3, [pc, #288]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	021a      	lsls	r2, r3, #8
 8001e58:	4b44      	ldr	r3, [pc, #272]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e60:	4b42      	ldr	r3, [pc, #264]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e66:	4949      	ldr	r1, [pc, #292]	@ (8001f8c <HAL_RCC_OscConfig+0x34c>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ff16 	bl	8000c9c <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7fe ff11 	bl	8000c9c <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1d8      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e88:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4013      	ands	r3, r2
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x236>
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e96:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d047      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ea2:	4b32      	ldr	r3, [pc, #200]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2238      	movs	r2, #56	@ 0x38
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b18      	cmp	r3, #24
 8001eac:	d10a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001eae:	4b2f      	ldr	r3, [pc, #188]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d03c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2f2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d138      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e1ba      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d019      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001ece:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ed0:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fee0 	bl	8000c9c <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7fe fedb 	bl	8000c9c <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1a2      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d0f1      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2a2>
 8001efe:	e018      	b.n	8001f32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001f02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7fe fec6 	bl	8000c9c <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe fec1 	bl	8000c9c <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e188      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f28:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1f1      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2fe>
 8001f3c:	e0c6      	b.n	80020cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	231f      	movs	r3, #31
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2238      	movs	r2, #56	@ 0x38
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d11e      	bne.n	8001f90 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_RCC_OscConfig+0x32c>)
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <HAL_RCC_OscConfig+0x31e>
 8001f5c:	e0b6      	b.n	80020cc <HAL_RCC_OscConfig+0x48c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d000      	beq.n	8001f68 <HAL_RCC_OscConfig+0x328>
 8001f66:	e0b1      	b.n	80020cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e166      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	fffeffff 	.word	0xfffeffff
 8001f74:	fffbffff 	.word	0xfffbffff
 8001f78:	ffff80ff 	.word	0xffff80ff
 8001f7c:	ffffc7ff 	.word	0xffffc7ff
 8001f80:	00f42400 	.word	0x00f42400
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f90:	4bac      	ldr	r3, [pc, #688]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8001f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	055b      	lsls	r3, r3, #21
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x360>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x362>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d011      	beq.n	8001fca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4ba7      	ldr	r3, [pc, #668]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8001fa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001faa:	4ba6      	ldr	r3, [pc, #664]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8001fac:	2180      	movs	r1, #128	@ 0x80
 8001fae:	0549      	lsls	r1, r1, #21
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fb4:	4ba3      	ldr	r3, [pc, #652]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8001fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	055b      	lsls	r3, r3, #21
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fca:	4b9f      	ldr	r3, [pc, #636]	@ (8002248 <HAL_RCC_OscConfig+0x608>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d11a      	bne.n	800200c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8002248 <HAL_RCC_OscConfig+0x608>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b9b      	ldr	r3, [pc, #620]	@ (8002248 <HAL_RCC_OscConfig+0x608>)
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	0049      	lsls	r1, r1, #1
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fe5a 	bl	8000c9c <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7fe fe55 	bl	8000c9c <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e11c      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002000:	4b91      	ldr	r3, [pc, #580]	@ (8002248 <HAL_RCC_OscConfig+0x608>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x3e2>
 8002014:	4b8b      	ldr	r3, [pc, #556]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002016:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002018:	4b8a      	ldr	r3, [pc, #552]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 800201a:	2101      	movs	r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002020:	e01c      	b.n	800205c <HAL_RCC_OscConfig+0x41c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b05      	cmp	r3, #5
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x404>
 800202a:	4b86      	ldr	r3, [pc, #536]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 800202c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800202e:	4b85      	ldr	r3, [pc, #532]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002030:	2104      	movs	r1, #4
 8002032:	430a      	orrs	r2, r1
 8002034:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002036:	4b83      	ldr	r3, [pc, #524]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002038:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800203a:	4b82      	ldr	r3, [pc, #520]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0x41c>
 8002044:	4b7f      	ldr	r3, [pc, #508]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002046:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002048:	4b7e      	ldr	r3, [pc, #504]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 800204a:	2101      	movs	r1, #1
 800204c:	438a      	bics	r2, r1
 800204e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002050:	4b7c      	ldr	r3, [pc, #496]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002052:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002054:	4b7b      	ldr	r3, [pc, #492]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002056:	2104      	movs	r1, #4
 8002058:	438a      	bics	r2, r1
 800205a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d014      	beq.n	800208e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe fe1a 	bl	8000c9c <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206c:	e009      	b.n	8002082 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fe15 	bl	8000c9c <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	4a74      	ldr	r2, [pc, #464]	@ (800224c <HAL_RCC_OscConfig+0x60c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0db      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	4b70      	ldr	r3, [pc, #448]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x42e>
 800208c:	e013      	b.n	80020b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7fe fe05 	bl	8000c9c <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002096:	e009      	b.n	80020ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7fe fe00 	bl	8000c9c <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	4a6a      	ldr	r2, [pc, #424]	@ (800224c <HAL_RCC_OscConfig+0x60c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0c6      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	4b65      	ldr	r3, [pc, #404]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	2202      	movs	r2, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020b6:	231f      	movs	r3, #31
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b60      	ldr	r3, [pc, #384]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80020c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80020c6:	4962      	ldr	r1, [pc, #392]	@ (8002250 <HAL_RCC_OscConfig+0x610>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d100      	bne.n	80020d6 <HAL_RCC_OscConfig+0x496>
 80020d4:	e0b0      	b.n	8002238 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2238      	movs	r2, #56	@ 0x38
 80020dc:	4013      	ands	r3, r2
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d100      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4a4>
 80020e2:	e078      	b.n	80021d6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d153      	bne.n	8002194 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4b55      	ldr	r3, [pc, #340]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80020f2:	4958      	ldr	r1, [pc, #352]	@ (8002254 <HAL_RCC_OscConfig+0x614>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fdd0 	bl	8000c9c <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe fdcb 	bl	8000c9c <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e092      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	4b4b      	ldr	r3, [pc, #300]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	049b      	lsls	r3, r3, #18
 800211c:	4013      	ands	r3, r2
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002120:	4b48      	ldr	r3, [pc, #288]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a4c      	ldr	r2, [pc, #304]	@ (8002258 <HAL_RCC_OscConfig+0x618>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	431a      	orrs	r2, r3
 8002148:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 800214a:	430a      	orrs	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214e:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	4b3c      	ldr	r3, [pc, #240]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002154:	2180      	movs	r1, #128	@ 0x80
 8002156:	0449      	lsls	r1, r1, #17
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800215c:	4b39      	ldr	r3, [pc, #228]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002162:	2180      	movs	r1, #128	@ 0x80
 8002164:	0549      	lsls	r1, r1, #21
 8002166:	430a      	orrs	r2, r1
 8002168:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe fd97 	bl	8000c9c <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7fe fd92 	bl	8000c9c <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e059      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	049b      	lsls	r3, r3, #18
 800218e:	4013      	ands	r3, r2
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x534>
 8002192:	e051      	b.n	8002238 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 800219a:	492e      	ldr	r1, [pc, #184]	@ (8002254 <HAL_RCC_OscConfig+0x614>)
 800219c:	400a      	ands	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fd7c 	bl	8000c9c <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021aa:	f7fe fd77 	bl	8000c9c <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e03e      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	049b      	lsls	r3, r3, #18
 80021c4:	4013      	ands	r3, r2
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80021ce:	4923      	ldr	r1, [pc, #140]	@ (800225c <HAL_RCC_OscConfig+0x61c>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	e030      	b.n	8002238 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e02b      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_RCC_OscConfig+0x604>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2203      	movs	r2, #3
 80021ec:	401a      	ands	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d11e      	bne.n	8002234 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2270      	movs	r2, #112	@ 0x70
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d117      	bne.n	8002234 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	23fe      	movs	r3, #254	@ 0xfe
 8002208:	01db      	lsls	r3, r3, #7
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d10e      	bne.n	8002234 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	23f8      	movs	r3, #248	@ 0xf8
 800221a:	039b      	lsls	r3, r3, #14
 800221c:	401a      	ands	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	0f5b      	lsrs	r3, r3, #29
 800222a:	075a      	lsls	r2, r3, #29
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b008      	add	sp, #32
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	40021000 	.word	0x40021000
 8002248:	40007000 	.word	0x40007000
 800224c:	00001388 	.word	0x00001388
 8002250:	efffffff 	.word	0xefffffff
 8002254:	feffffff 	.word	0xfeffffff
 8002258:	1fc1808c 	.word	0x1fc1808c
 800225c:	effefffc 	.word	0xeffefffc

08002260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0e9      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b76      	ldr	r3, [pc, #472]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2207      	movs	r2, #7
 800227a:	4013      	ands	r3, r2
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d91e      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b73      	ldr	r3, [pc, #460]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2207      	movs	r2, #7
 8002288:	4393      	bics	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	4b70      	ldr	r3, [pc, #448]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002294:	f7fe fd02 	bl	8000c9c <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800229c:	e009      	b.n	80022b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229e:	f7fe fcfd 	bl	8000c9c <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002454 <HAL_RCC_ClockConfig+0x1f4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0ca      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022b2:	4b67      	ldr	r3, [pc, #412]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2207      	movs	r2, #7
 80022b8:	4013      	ands	r3, r2
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2202      	movs	r2, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	d015      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2204      	movs	r2, #4
 80022d0:	4013      	ands	r3, r2
 80022d2:	d006      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022d4:	4b60      	ldr	r3, [pc, #384]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 80022da:	21e0      	movs	r1, #224	@ 0xe0
 80022dc:	01c9      	lsls	r1, r1, #7
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4a5d      	ldr	r2, [pc, #372]	@ (800245c <HAL_RCC_ClockConfig+0x1fc>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b59      	ldr	r3, [pc, #356]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	d057      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002308:	4b53      	ldr	r3, [pc, #332]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	4013      	ands	r3, r2
 8002312:	d12b      	bne.n	800236c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e097      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d107      	bne.n	8002330 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002320:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	049b      	lsls	r3, r3, #18
 8002328:	4013      	ands	r3, r2
 800232a:	d11f      	bne.n	800236c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e08b      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002338:	4b47      	ldr	r3, [pc, #284]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4013      	ands	r3, r2
 8002342:	d113      	bne.n	800236c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e07f      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d106      	bne.n	800235e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002350:	4b41      	ldr	r3, [pc, #260]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 8002352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d108      	bne.n	800236c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e074      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235e:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2202      	movs	r2, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e06d      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800236c:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2207      	movs	r2, #7
 8002372:	4393      	bics	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4b37      	ldr	r3, [pc, #220]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002380:	f7fe fc8c 	bl	8000c9c <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002388:	e009      	b.n	800239e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238a:	f7fe fc87 	bl	8000c9c <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	4a2f      	ldr	r2, [pc, #188]	@ (8002454 <HAL_RCC_ClockConfig+0x1f4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e054      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2e      	ldr	r3, [pc, #184]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2238      	movs	r2, #56	@ 0x38
 80023a4:	401a      	ands	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1ec      	bne.n	800238a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2207      	movs	r2, #7
 80023b6:	4013      	ands	r3, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d21e      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2207      	movs	r2, #7
 80023c4:	4393      	bics	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fc64 	bl	8000c9c <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023d8:	e009      	b.n	80023ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023da:	f7fe fc5f 	bl	8000c9c <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002454 <HAL_RCC_ClockConfig+0x1f4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e02c      	b.n	8002448 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2207      	movs	r2, #7
 80023f4:	4013      	ands	r3, r2
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1ee      	bne.n	80023da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2204      	movs	r2, #4
 8002402:	4013      	ands	r3, r2
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002406:	4b14      	ldr	r3, [pc, #80]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <HAL_RCC_ClockConfig+0x200>)
 800240c:	4013      	ands	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800241a:	f000 f829 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800241e:	0001      	movs	r1, r0
 8002420:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <HAL_RCC_ClockConfig+0x1f8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	220f      	movs	r2, #15
 8002428:	401a      	ands	r2, r3
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_RCC_ClockConfig+0x204>)
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	58d3      	ldr	r3, [r2, r3]
 8002430:	221f      	movs	r2, #31
 8002432:	4013      	ands	r3, r2
 8002434:	000a      	movs	r2, r1
 8002436:	40da      	lsrs	r2, r3
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_ClockConfig+0x208>)
 800243a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_RCC_ClockConfig+0x20c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0018      	movs	r0, r3
 8002442:	f7fe fbcf 	bl	8000be4 <HAL_InitTick>
 8002446:	0003      	movs	r3, r0
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40022000 	.word	0x40022000
 8002454:	00001388 	.word	0x00001388
 8002458:	40021000 	.word	0x40021000
 800245c:	fffff0ff 	.word	0xfffff0ff
 8002460:	ffff8fff 	.word	0xffff8fff
 8002464:	08005480 	.word	0x08005480
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002476:	4b3c      	ldr	r3, [pc, #240]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2238      	movs	r2, #56	@ 0x38
 800247c:	4013      	ands	r3, r2
 800247e:	d10f      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002480:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0adb      	lsrs	r3, r3, #11
 8002486:	2207      	movs	r2, #7
 8002488:	4013      	ands	r3, r2
 800248a:	2201      	movs	r2, #1
 800248c:	409a      	lsls	r2, r3
 800248e:	0013      	movs	r3, r2
 8002490:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	4835      	ldr	r0, [pc, #212]	@ (800256c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002496:	f7fd fe3d 	bl	8000114 <__udivsi3>
 800249a:	0003      	movs	r3, r0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	e05d      	b.n	800255c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2238      	movs	r2, #56	@ 0x38
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024ac:	4b30      	ldr	r3, [pc, #192]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x100>)
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	e054      	b.n	800255c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2238      	movs	r2, #56	@ 0x38
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d138      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024be:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2203      	movs	r2, #3
 80024c4:	4013      	ands	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c8:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	2207      	movs	r2, #7
 80024d0:	4013      	ands	r3, r2
 80024d2:	3301      	adds	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d10d      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	4824      	ldr	r0, [pc, #144]	@ (8002570 <HAL_RCC_GetSysClockFreq+0x100>)
 80024e0:	f7fd fe18 	bl	8000114 <__udivsi3>
 80024e4:	0003      	movs	r3, r0
 80024e6:	0019      	movs	r1, r3
 80024e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	227f      	movs	r2, #127	@ 0x7f
 80024f0:	4013      	ands	r3, r2
 80024f2:	434b      	muls	r3, r1
 80024f4:	617b      	str	r3, [r7, #20]
        break;
 80024f6:	e00d      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	481c      	ldr	r0, [pc, #112]	@ (800256c <HAL_RCC_GetSysClockFreq+0xfc>)
 80024fc:	f7fd fe0a 	bl	8000114 <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	0019      	movs	r1, r3
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	227f      	movs	r2, #127	@ 0x7f
 800250c:	4013      	ands	r3, r2
 800250e:	434b      	muls	r3, r1
 8002510:	617b      	str	r3, [r7, #20]
        break;
 8002512:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0f5b      	lsrs	r3, r3, #29
 800251a:	2207      	movs	r2, #7
 800251c:	4013      	ands	r3, r2
 800251e:	3301      	adds	r3, #1
 8002520:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	6978      	ldr	r0, [r7, #20]
 8002526:	f7fd fdf5 	bl	8000114 <__udivsi3>
 800252a:	0003      	movs	r3, r0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e015      	b.n	800255c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002530:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2238      	movs	r2, #56	@ 0x38
 8002536:	4013      	ands	r3, r2
 8002538:	2b20      	cmp	r3, #32
 800253a:	d103      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	e00b      	b.n	800255c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2238      	movs	r2, #56	@ 0x38
 800254a:	4013      	ands	r3, r2
 800254c:	2b18      	cmp	r3, #24
 800254e:	d103      	bne.n	8002558 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002550:	23fa      	movs	r3, #250	@ 0xfa
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e001      	b.n	800255c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800255c:	693b      	ldr	r3, [r7, #16]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	40021000 	.word	0x40021000
 800256c:	00f42400 	.word	0x00f42400
 8002570:	007a1200 	.word	0x007a1200

08002574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002578:	4b02      	ldr	r3, [pc, #8]	@ (8002584 <HAL_RCC_GetHCLKFreq+0x10>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	20000000 	.word	0x20000000

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800258c:	f7ff fff2 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8002590:	0004      	movs	r4, r0
 8002592:	f7ff fb49 	bl	8001c28 <LL_RCC_GetAPB1Prescaler>
 8002596:	0003      	movs	r3, r0
 8002598:	0b1a      	lsrs	r2, r3, #12
 800259a:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	58d3      	ldr	r3, [r2, r3]
 80025a0:	221f      	movs	r2, #31
 80025a2:	4013      	ands	r3, r2
 80025a4:	40dc      	lsrs	r4, r3
 80025a6:	0023      	movs	r3, r4
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bdb0      	pop	{r4, r5, r7, pc}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	080054c0 	.word	0x080054c0

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025bc:	2313      	movs	r3, #19
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c4:	2312      	movs	r3, #18
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	029b      	lsls	r3, r3, #10
 80025d4:	4013      	ands	r3, r2
 80025d6:	d100      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025d8:	e0a3      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2011      	movs	r0, #17
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b86      	ldr	r3, [pc, #536]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025e6:	2380      	movs	r3, #128	@ 0x80
 80025e8:	055b      	lsls	r3, r3, #21
 80025ea:	4013      	ands	r3, r2
 80025ec:	d110      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b83      	ldr	r3, [pc, #524]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025f2:	4b82      	ldr	r3, [pc, #520]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025f4:	2180      	movs	r1, #128	@ 0x80
 80025f6:	0549      	lsls	r1, r1, #21
 80025f8:	430a      	orrs	r2, r1
 80025fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025fc:	4b7f      	ldr	r3, [pc, #508]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	055b      	lsls	r3, r3, #21
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	183b      	adds	r3, r7, r0
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002610:	4b7b      	ldr	r3, [pc, #492]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b7a      	ldr	r3, [pc, #488]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002616:	2180      	movs	r1, #128	@ 0x80
 8002618:	0049      	lsls	r1, r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800261e:	f7fe fb3d 	bl	8000c9c <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002626:	e00b      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7fe fb38 	bl	8000c9c <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d904      	bls.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002636:	2313      	movs	r3, #19
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2203      	movs	r2, #3
 800263c:	701a      	strb	r2, [r3, #0]
        break;
 800263e:	e005      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002640:	4b6f      	ldr	r3, [pc, #444]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d0ed      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800264c:	2313      	movs	r3, #19
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d154      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002656:	4b69      	ldr	r3, [pc, #420]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002658:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800265a:	23c0      	movs	r3, #192	@ 0xc0
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4013      	ands	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d019      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	429a      	cmp	r2, r3
 8002670:	d014      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002672:	4b62      	ldr	r3, [pc, #392]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	4a63      	ldr	r2, [pc, #396]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002678:	4013      	ands	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800267c:	4b5f      	ldr	r3, [pc, #380]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800267e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002680:	4b5e      	ldr	r3, [pc, #376]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002682:	2180      	movs	r1, #128	@ 0x80
 8002684:	0249      	lsls	r1, r1, #9
 8002686:	430a      	orrs	r2, r1
 8002688:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800268a:	4b5c      	ldr	r3, [pc, #368]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800268c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800268e:	4b5b      	ldr	r3, [pc, #364]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002690:	495d      	ldr	r1, [pc, #372]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002692:	400a      	ands	r2, r1
 8002694:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002696:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d016      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fafa 	bl	8000c9c <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ac:	e00c      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe faf5 	bl	8000c9c <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	4a54      	ldr	r2, [pc, #336]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d904      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80026be:	2313      	movs	r3, #19
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2203      	movs	r2, #3
 80026c4:	701a      	strb	r2, [r3, #0]
            break;
 80026c6:	e004      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c8:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2202      	movs	r2, #2
 80026ce:	4013      	ands	r3, r2
 80026d0:	d0ed      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80026d2:	2313      	movs	r3, #19
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026dc:	4b47      	ldr	r3, [pc, #284]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	4b44      	ldr	r3, [pc, #272]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80026ec:	430a      	orrs	r2, r1
 80026ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026f0:	e00c      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026f2:	2312      	movs	r3, #18
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2213      	movs	r2, #19
 80026f8:	18ba      	adds	r2, r7, r2
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e005      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	2312      	movs	r3, #18
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2213      	movs	r2, #19
 8002706:	18ba      	adds	r2, r7, r2
 8002708:	7812      	ldrb	r2, [r2, #0]
 800270a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800270c:	2311      	movs	r3, #17
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d105      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002716:	4b39      	ldr	r3, [pc, #228]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800271a:	4b38      	ldr	r3, [pc, #224]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800271c:	493c      	ldr	r1, [pc, #240]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800271e:	400a      	ands	r2, r1
 8002720:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2201      	movs	r2, #1
 8002728:	4013      	ands	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272c:	4b33      	ldr	r3, [pc, #204]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	2203      	movs	r2, #3
 8002732:	4393      	bics	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4b30      	ldr	r3, [pc, #192]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800273c:	430a      	orrs	r2, r1
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800274a:	4b2c      	ldr	r3, [pc, #176]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	220c      	movs	r2, #12
 8002750:	4393      	bics	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b28      	ldr	r3, [pc, #160]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800275a:	430a      	orrs	r2, r1
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2220      	movs	r2, #32
 8002764:	4013      	ands	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002768:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	4a29      	ldr	r2, [pc, #164]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	4b21      	ldr	r3, [pc, #132]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002778:	430a      	orrs	r2, r1
 800277a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	01db      	lsls	r3, r3, #7
 8002784:	4013      	ands	r3, r2
 8002786:	d015      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002788:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	0899      	lsrs	r1, r3, #2
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002796:	430a      	orrs	r2, r1
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	05db      	lsls	r3, r3, #23
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d106      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027ac:	2180      	movs	r1, #128	@ 0x80
 80027ae:	0249      	lsls	r1, r1, #9
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	@ 0x80
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4013      	ands	r3, r2
 80027be:	d016      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027c0:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	01db      	lsls	r3, r3, #7
 80027dc:	429a      	cmp	r2, r3
 80027de:	d106      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e6:	2180      	movs	r1, #128	@ 0x80
 80027e8:	0249      	lsls	r1, r1, #9
 80027ea:	430a      	orrs	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027ee:	2312      	movs	r3, #18
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	40007000 	.word	0x40007000
 8002804:	fffffcff 	.word	0xfffffcff
 8002808:	fffeffff 	.word	0xfffeffff
 800280c:	00001388 	.word	0x00001388
 8002810:	efffffff 	.word	0xefffffff
 8002814:	ffffcfff 	.word	0xffffcfff
 8002818:	ffff3fff 	.word	0xffff3fff

0800281c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0a8      	b.n	8002980 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	2382      	movs	r3, #130	@ 0x82
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	429a      	cmp	r2, r3
 8002840:	d009      	beq.n	8002856 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	61da      	str	r2, [r3, #28]
 8002848:	e005      	b.n	8002856 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	225d      	movs	r2, #93	@ 0x5d
 8002860:	5c9b      	ldrb	r3, [r3, r2]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	225c      	movs	r2, #92	@ 0x5c
 800286c:	2100      	movs	r1, #0
 800286e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	0018      	movs	r0, r3
 8002874:	f7fe f82a 	bl	80008cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	225d      	movs	r2, #93	@ 0x5d
 800287c:	2102      	movs	r1, #2
 800287e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2140      	movs	r1, #64	@ 0x40
 800288c:	438a      	bics	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	23e0      	movs	r3, #224	@ 0xe0
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	429a      	cmp	r2, r3
 800289a:	d902      	bls.n	80028a2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e002      	b.n	80028a8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	23f0      	movs	r3, #240	@ 0xf0
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d008      	beq.n	80028c6 <HAL_SPI_Init+0xaa>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	23e0      	movs	r3, #224	@ 0xe0
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	429a      	cmp	r2, r3
 80028be:	d002      	beq.n	80028c6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	2382      	movs	r3, #130	@ 0x82
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	401a      	ands	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6899      	ldr	r1, [r3, #8]
 80028d4:	2384      	movs	r3, #132	@ 0x84
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	400b      	ands	r3, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2102      	movs	r1, #2
 80028e2:	400b      	ands	r3, r1
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2101      	movs	r1, #1
 80028ec:	400b      	ands	r3, r1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6999      	ldr	r1, [r3, #24]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	400b      	ands	r3, r1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2138      	movs	r1, #56	@ 0x38
 8002902:	400b      	ands	r3, r1
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2180      	movs	r1, #128	@ 0x80
 800290c:	400b      	ands	r3, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	0011      	movs	r1, r2
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002916:	2380      	movs	r3, #128	@ 0x80
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	2204      	movs	r2, #4
 800292c:	401a      	ands	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	2110      	movs	r1, #16
 8002934:	400b      	ands	r3, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	2108      	movs	r1, #8
 800293e:	400b      	ands	r3, r1
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68d9      	ldr	r1, [r3, #12]
 8002946:	23f0      	movs	r3, #240	@ 0xf0
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	400b      	ands	r3, r1
 800294c:	431a      	orrs	r2, r3
 800294e:	0011      	movs	r1, r2
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	015b      	lsls	r3, r3, #5
 8002956:	401a      	ands	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4907      	ldr	r1, [pc, #28]	@ (8002988 <HAL_SPI_Init+0x16c>)
 800296c:	400a      	ands	r2, r1
 800296e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	225d      	movs	r2, #93	@ 0x5d
 800297a:	2101      	movs	r1, #1
 800297c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b004      	add	sp, #16
 8002986:	bd80      	pop	{r7, pc}
 8002988:	fffff7ff 	.word	0xfffff7ff

0800298c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	1dbb      	adds	r3, r7, #6
 800299a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800299c:	231f      	movs	r3, #31
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	225c      	movs	r2, #92	@ 0x5c
 80029a8:	5c9b      	ldrb	r3, [r3, r2]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Transmit+0x26>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e147      	b.n	8002c42 <HAL_SPI_Transmit+0x2b6>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	225c      	movs	r2, #92	@ 0x5c
 80029b6:	2101      	movs	r1, #1
 80029b8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ba:	f7fe f96f 	bl	8000c9c <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029c2:	2316      	movs	r3, #22
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	1dba      	adds	r2, r7, #6
 80029c8:	8812      	ldrh	r2, [r2, #0]
 80029ca:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	225d      	movs	r2, #93	@ 0x5d
 80029d0:	5c9b      	ldrb	r3, [r3, r2]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d004      	beq.n	80029e2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80029d8:	231f      	movs	r3, #31
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
    goto error;
 80029e0:	e128      	b.n	8002c34 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_SPI_Transmit+0x64>
 80029e8:	1dbb      	adds	r3, r7, #6
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80029f0:	231f      	movs	r3, #31
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80029f8:	e11c      	b.n	8002c34 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	225d      	movs	r2, #93	@ 0x5d
 80029fe:	2103      	movs	r1, #3
 8002a00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1dba      	adds	r2, r7, #6
 8002a12:	8812      	ldrh	r2, [r2, #0]
 8002a14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1dba      	adds	r2, r7, #6
 8002a1a:	8812      	ldrh	r2, [r2, #0]
 8002a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2244      	movs	r2, #68	@ 0x44
 8002a28:	2100      	movs	r1, #0
 8002a2a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2246      	movs	r2, #70	@ 0x46
 8002a30:	2100      	movs	r1, #0
 8002a32:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d110      	bne.n	8002a6e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2140      	movs	r1, #64	@ 0x40
 8002a58:	438a      	bics	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2180      	movs	r1, #128	@ 0x80
 8002a68:	01c9      	lsls	r1, r1, #7
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2240      	movs	r2, #64	@ 0x40
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b40      	cmp	r3, #64	@ 0x40
 8002a7a:	d007      	beq.n	8002a8c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2140      	movs	r1, #64	@ 0x40
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	23e0      	movs	r3, #224	@ 0xe0
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d952      	bls.n	8002b3e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <HAL_SPI_Transmit+0x11e>
 8002aa0:	2316      	movs	r3, #22
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d143      	bne.n	8002b32 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	881a      	ldrh	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aba:	1c9a      	adds	r2, r3, #2
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ace:	e030      	b.n	8002b32 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d112      	bne.n	8002b04 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae2:	881a      	ldrh	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aee:	1c9a      	adds	r2, r3, #2
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b02:	e016      	b.n	8002b32 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b04:	f7fe f8ca 	bl	8000c9c <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d802      	bhi.n	8002b1a <HAL_SPI_Transmit+0x18e>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_SPI_Transmit+0x194>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d108      	bne.n	8002b32 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002b20:	231f      	movs	r3, #31
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2203      	movs	r2, #3
 8002b26:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	225d      	movs	r2, #93	@ 0x5d
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b30:	e080      	b.n	8002c34 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1c9      	bne.n	8002ad0 <HAL_SPI_Transmit+0x144>
 8002b3c:	e053      	b.n	8002be6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_SPI_Transmit+0x1c4>
 8002b46:	2316      	movs	r3, #22
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d145      	bne.n	8002bdc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	330c      	adds	r3, #12
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002b76:	e031      	b.n	8002bdc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d113      	bne.n	8002bae <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bac:	e016      	b.n	8002bdc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bae:	f7fe f875 	bl	8000c9c <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d802      	bhi.n	8002bc4 <HAL_SPI_Transmit+0x238>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_SPI_Transmit+0x23e>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002bca:	231f      	movs	r3, #31
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2203      	movs	r2, #3
 8002bd0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	225d      	movs	r2, #93	@ 0x5d
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
          goto error;
 8002bda:	e02b      	b.n	8002c34 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1c8      	bne.n	8002b78 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fcef 	bl	80035d0 <SPI_EndRxTxTransaction>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002c22:	231f      	movs	r3, #31
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e003      	b.n	8002c34 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	225d      	movs	r2, #93	@ 0x5d
 8002c30:	2101      	movs	r1, #1
 8002c32:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	225c      	movs	r2, #92	@ 0x5c
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c3c:	231f      	movs	r3, #31
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	781b      	ldrb	r3, [r3, #0]
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b008      	add	sp, #32
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	1dbb      	adds	r3, r7, #6
 8002c5a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5c:	2117      	movs	r1, #23
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	225d      	movs	r2, #93	@ 0x5d
 8002c68:	5c9b      	ldrb	r3, [r3, r2]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d003      	beq.n	8002c78 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c76:	e12b      	b.n	8002ed0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	2382      	movs	r3, #130	@ 0x82
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d113      	bne.n	8002cac <HAL_SPI_Receive+0x60>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	225d      	movs	r2, #93	@ 0x5d
 8002c90:	2104      	movs	r1, #4
 8002c92:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c94:	1dbb      	adds	r3, r7, #6
 8002c96:	881c      	ldrh	r4, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	0023      	movs	r3, r4
 8002ca4:	f000 f924 	bl	8002ef0 <HAL_SPI_TransmitReceive>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	e118      	b.n	8002ede <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	225c      	movs	r2, #92	@ 0x5c
 8002cb0:	5c9b      	ldrb	r3, [r3, r2]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_SPI_Receive+0x6e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e111      	b.n	8002ede <HAL_SPI_Receive+0x292>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	225c      	movs	r2, #92	@ 0x5c
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc2:	f7fd ffeb 	bl	8000c9c <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_SPI_Receive+0x8c>
 8002cd0:	1dbb      	adds	r3, r7, #6
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002cd8:	2317      	movs	r3, #23
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ce0:	e0f6      	b.n	8002ed0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	225d      	movs	r2, #93	@ 0x5d
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1dba      	adds	r2, r7, #6
 8002cfa:	2144      	movs	r1, #68	@ 0x44
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1dba      	adds	r2, r7, #6
 8002d04:	2146      	movs	r1, #70	@ 0x46
 8002d06:	8812      	ldrh	r2, [r2, #0]
 8002d08:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	23e0      	movs	r3, #224	@ 0xe0
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d908      	bls.n	8002d46 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	496a      	ldr	r1, [pc, #424]	@ (8002ee8 <HAL_SPI_Receive+0x29c>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	e008      	b.n	8002d58 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2180      	movs	r1, #128	@ 0x80
 8002d52:	0149      	lsls	r1, r1, #5
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d10f      	bne.n	8002d84 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2140      	movs	r1, #64	@ 0x40
 8002d70:	438a      	bics	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	495b      	ldr	r1, [pc, #364]	@ (8002eec <HAL_SPI_Receive+0x2a0>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2240      	movs	r2, #64	@ 0x40
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b40      	cmp	r3, #64	@ 0x40
 8002d90:	d007      	beq.n	8002da2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2140      	movs	r1, #64	@ 0x40
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	23e0      	movs	r3, #224	@ 0xe0
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d900      	bls.n	8002db0 <HAL_SPI_Receive+0x164>
 8002dae:	e071      	b.n	8002e94 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002db0:	e035      	b.n	8002e1e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2201      	movs	r2, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d117      	bne.n	8002df0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2246      	movs	r2, #70	@ 0x46
 8002de0:	5a9b      	ldrh	r3, [r3, r2]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b299      	uxth	r1, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2246      	movs	r2, #70	@ 0x46
 8002dec:	5299      	strh	r1, [r3, r2]
 8002dee:	e016      	b.n	8002e1e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fd ff54 	bl	8000c9c <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d802      	bhi.n	8002e06 <HAL_SPI_Receive+0x1ba>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_SPI_Receive+0x1c0>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d108      	bne.n	8002e1e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002e0c:	2317      	movs	r3, #23
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2203      	movs	r2, #3
 8002e12:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	225d      	movs	r2, #93	@ 0x5d
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]
          goto error;
 8002e1c:	e058      	b.n	8002ed0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2246      	movs	r2, #70	@ 0x46
 8002e22:	5a9b      	ldrh	r3, [r3, r2]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1c3      	bne.n	8002db2 <HAL_SPI_Receive+0x166>
 8002e2a:	e039      	b.n	8002ea0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2201      	movs	r2, #1
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d115      	bne.n	8002e66 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	b292      	uxth	r2, r2
 8002e46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2246      	movs	r2, #70	@ 0x46
 8002e56:	5a9b      	ldrh	r3, [r3, r2]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b299      	uxth	r1, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2246      	movs	r2, #70	@ 0x46
 8002e62:	5299      	strh	r1, [r3, r2]
 8002e64:	e016      	b.n	8002e94 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e66:	f7fd ff19 	bl	8000c9c <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d802      	bhi.n	8002e7c <HAL_SPI_Receive+0x230>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	d102      	bne.n	8002e82 <HAL_SPI_Receive+0x236>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d108      	bne.n	8002e94 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002e82:	2317      	movs	r3, #23
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2203      	movs	r2, #3
 8002e88:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	225d      	movs	r2, #93	@ 0x5d
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
          goto error;
 8002e92:	e01d      	b.n	8002ed0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2246      	movs	r2, #70	@ 0x46
 8002e98:	5a9b      	ldrh	r3, [r3, r2]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1c5      	bne.n	8002e2c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 fb34 	bl	8003514 <SPI_EndRxTransaction>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002ebe:	2317      	movs	r3, #23
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e003      	b.n	8002ed0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	225d      	movs	r2, #93	@ 0x5d
 8002ecc:	2101      	movs	r1, #1
 8002ece:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	225c      	movs	r2, #92	@ 0x5c
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ed8:	2317      	movs	r3, #23
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	781b      	ldrb	r3, [r3, #0]
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b007      	add	sp, #28
 8002ee4:	bd90      	pop	{r4, r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	ffffefff 	.word	0xffffefff
 8002eec:	ffffbfff 	.word	0xffffbfff

08002ef0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	001a      	movs	r2, r3
 8002efe:	1cbb      	adds	r3, r7, #2
 8002f00:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f02:	2301      	movs	r3, #1
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f06:	2323      	movs	r3, #35	@ 0x23
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	225c      	movs	r2, #92	@ 0x5c
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x2c>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e1c4      	b.n	80032a6 <HAL_SPI_TransmitReceive+0x3b6>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	225c      	movs	r2, #92	@ 0x5c
 8002f20:	2101      	movs	r1, #1
 8002f22:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f24:	f7fd feba 	bl	8000c9c <HAL_GetTick>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f2c:	201b      	movs	r0, #27
 8002f2e:	183b      	adds	r3, r7, r0
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	215d      	movs	r1, #93	@ 0x5d
 8002f34:	5c52      	ldrb	r2, [r2, r1]
 8002f36:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f3e:	2312      	movs	r3, #18
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	1cba      	adds	r2, r7, #2
 8002f44:	8812      	ldrh	r2, [r2, #0]
 8002f46:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f48:	183b      	adds	r3, r7, r0
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d011      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x84>
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	2382      	movs	r3, #130	@ 0x82
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d107      	bne.n	8002f6a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <HAL_SPI_TransmitReceive+0x7a>
 8002f62:	183b      	adds	r3, r7, r0
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d004      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002f6a:	2323      	movs	r3, #35	@ 0x23
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	2202      	movs	r2, #2
 8002f70:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f72:	e191      	b.n	8003298 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x98>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x98>
 8002f80:	1cbb      	adds	r3, r7, #2
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002f88:	2323      	movs	r3, #35	@ 0x23
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f90:	e182      	b.n	8003298 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	225d      	movs	r2, #93	@ 0x5d
 8002f96:	5c9b      	ldrb	r3, [r3, r2]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	225d      	movs	r2, #93	@ 0x5d
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1cba      	adds	r2, r7, #2
 8002fb6:	2146      	movs	r1, #70	@ 0x46
 8002fb8:	8812      	ldrh	r2, [r2, #0]
 8002fba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1cba      	adds	r2, r7, #2
 8002fc0:	2144      	movs	r1, #68	@ 0x44
 8002fc2:	8812      	ldrh	r2, [r2, #0]
 8002fc4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1cba      	adds	r2, r7, #2
 8002fd0:	8812      	ldrh	r2, [r2, #0]
 8002fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1cba      	adds	r2, r7, #2
 8002fd8:	8812      	ldrh	r2, [r2, #0]
 8002fda:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	23e0      	movs	r3, #224	@ 0xe0
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d908      	bls.n	8003006 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	49ac      	ldr	r1, [pc, #688]	@ (80032b0 <HAL_SPI_TransmitReceive+0x3c0>)
 8003000:	400a      	ands	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	e008      	b.n	8003018 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2180      	movs	r1, #128	@ 0x80
 8003012:	0149      	lsls	r1, r1, #5
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2240      	movs	r2, #64	@ 0x40
 8003020:	4013      	ands	r3, r2
 8003022:	2b40      	cmp	r3, #64	@ 0x40
 8003024:	d007      	beq.n	8003036 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2140      	movs	r1, #64	@ 0x40
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	23e0      	movs	r3, #224	@ 0xe0
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	429a      	cmp	r2, r3
 8003040:	d800      	bhi.n	8003044 <HAL_SPI_TransmitReceive+0x154>
 8003042:	e083      	b.n	800314c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x168>
 800304c:	2312      	movs	r3, #18
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d000      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x168>
 8003056:	e06d      	b.n	8003134 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	881a      	ldrh	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	1c9a      	adds	r2, r3, #2
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307c:	e05a      	b.n	8003134 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d11b      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x1d4>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_SPI_TransmitReceive+0x1d4>
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	2b01      	cmp	r3, #1
 800309a:	d113      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d11c      	bne.n	800310c <HAL_SPI_TransmitReceive+0x21c>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2246      	movs	r2, #70	@ 0x46
 80030d6:	5a9b      	ldrh	r3, [r3, r2]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	b292      	uxth	r2, r2
 80030ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2246      	movs	r2, #70	@ 0x46
 80030fa:	5a9b      	ldrh	r3, [r3, r2]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b299      	uxth	r1, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2246      	movs	r2, #70	@ 0x46
 8003106:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003108:	2301      	movs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800310c:	f7fd fdc6 	bl	8000c9c <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003118:	429a      	cmp	r2, r3
 800311a:	d80b      	bhi.n	8003134 <HAL_SPI_TransmitReceive+0x244>
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311e:	3301      	adds	r3, #1
 8003120:	d008      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003122:	2323      	movs	r3, #35	@ 0x23
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2203      	movs	r2, #3
 8003128:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	225d      	movs	r2, #93	@ 0x5d
 800312e:	2101      	movs	r1, #1
 8003130:	5499      	strb	r1, [r3, r2]
        goto error;
 8003132:	e0b1      	b.n	8003298 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d19f      	bne.n	800307e <HAL_SPI_TransmitReceive+0x18e>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2246      	movs	r2, #70	@ 0x46
 8003142:	5a9b      	ldrh	r3, [r3, r2]
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d199      	bne.n	800307e <HAL_SPI_TransmitReceive+0x18e>
 800314a:	e089      	b.n	8003260 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x270>
 8003154:	2312      	movs	r3, #18
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d000      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x270>
 800315e:	e074      	b.n	800324a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003186:	e060      	b.n	800324a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2202      	movs	r2, #2
 8003190:	4013      	ands	r3, r2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d11c      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x2e0>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x2e0>
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d114      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d11e      	bne.n	800321c <HAL_SPI_TransmitReceive+0x32c>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2246      	movs	r2, #70	@ 0x46
 80031e2:	5a9b      	ldrh	r3, [r3, r2]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d018      	beq.n	800321c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	001a      	movs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2246      	movs	r2, #70	@ 0x46
 800320a:	5a9b      	ldrh	r3, [r3, r2]
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b299      	uxth	r1, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2246      	movs	r2, #70	@ 0x46
 8003216:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003218:	2301      	movs	r3, #1
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800321c:	f7fd fd3e 	bl	8000c9c <HAL_GetTick>
 8003220:	0002      	movs	r2, r0
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003228:	429a      	cmp	r2, r3
 800322a:	d802      	bhi.n	8003232 <HAL_SPI_TransmitReceive+0x342>
 800322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322e:	3301      	adds	r3, #1
 8003230:	d102      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x348>
 8003232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003238:	2323      	movs	r3, #35	@ 0x23
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2203      	movs	r2, #3
 800323e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	225d      	movs	r2, #93	@ 0x5d
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]
        goto error;
 8003248:	e026      	b.n	8003298 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d199      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x298>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2246      	movs	r2, #70	@ 0x46
 8003258:	5a9b      	ldrh	r3, [r3, r2]
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d193      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	0018      	movs	r0, r3
 8003268:	f000 f9b2 	bl	80035d0 <SPI_EndRxTxTransaction>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d006      	beq.n	800327e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003270:	2323      	movs	r3, #35	@ 0x23
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	2b00      	cmp	r3, #0
 8003284:	d004      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003286:	2323      	movs	r3, #35	@ 0x23
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e003      	b.n	8003298 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	225d      	movs	r2, #93	@ 0x5d
 8003294:	2101      	movs	r1, #1
 8003296:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	225c      	movs	r2, #92	@ 0x5c
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80032a0:	2323      	movs	r3, #35	@ 0x23
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b00a      	add	sp, #40	@ 0x28
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	ffffefff 	.word	0xffffefff

080032b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c4:	f7fd fcea 	bl	8000c9c <HAL_GetTick>
 80032c8:	0002      	movs	r2, r0
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d4:	f7fd fce2 	bl	8000c9c <HAL_GetTick>
 80032d8:	0003      	movs	r3, r0
 80032da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032dc:	4b3a      	ldr	r3, [pc, #232]	@ (80033c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	015b      	lsls	r3, r3, #5
 80032e2:	0d1b      	lsrs	r3, r3, #20
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	4353      	muls	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ea:	e058      	b.n	800339e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	d055      	beq.n	800339e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f2:	f7fd fcd3 	bl	8000c9c <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d902      	bls.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d142      	bne.n	800338e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	21e0      	movs	r1, #224	@ 0xe0
 8003314:	438a      	bics	r2, r1
 8003316:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	2382      	movs	r3, #130	@ 0x82
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	429a      	cmp	r2, r3
 8003322:	d113      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	2380      	movs	r3, #128	@ 0x80
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	429a      	cmp	r2, r3
 800332e:	d005      	beq.n	800333c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	2380      	movs	r3, #128	@ 0x80
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	429a      	cmp	r2, r3
 800333a:	d107      	bne.n	800334c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2140      	movs	r1, #64	@ 0x40
 8003348:	438a      	bics	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	019b      	lsls	r3, r3, #6
 8003354:	429a      	cmp	r2, r3
 8003356:	d110      	bne.n	800337a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	491a      	ldr	r1, [pc, #104]	@ (80033cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2180      	movs	r1, #128	@ 0x80
 8003374:	0189      	lsls	r1, r1, #6
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	225d      	movs	r2, #93	@ 0x5d
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	225c      	movs	r2, #92	@ 0x5c
 8003386:	2100      	movs	r1, #0
 8003388:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e017      	b.n	80033be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	3b01      	subs	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	425a      	negs	r2, r3
 80033ae:	4153      	adcs	r3, r2
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	001a      	movs	r2, r3
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d197      	bne.n	80032ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b008      	add	sp, #32
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	20000000 	.word	0x20000000
 80033cc:	ffffdfff 	.word	0xffffdfff

080033d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033de:	2317      	movs	r3, #23
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033e6:	f7fd fc59 	bl	8000c9c <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	18d3      	adds	r3, r2, r3
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80033f6:	f7fd fc51 	bl	8000c9c <HAL_GetTick>
 80033fa:	0003      	movs	r3, r0
 80033fc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003406:	4b41      	ldr	r3, [pc, #260]	@ (800350c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	0013      	movs	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	189b      	adds	r3, r3, r2
 8003410:	00da      	lsls	r2, r3, #3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	0d1b      	lsrs	r3, r3, #20
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	4353      	muls	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800341c:	e068      	b.n	80034f0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	23c0      	movs	r3, #192	@ 0xc0
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	429a      	cmp	r2, r3
 8003426:	d10a      	bne.n	800343e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	2117      	movs	r1, #23
 8003436:	187b      	adds	r3, r7, r1
 8003438:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800343a:	187b      	adds	r3, r7, r1
 800343c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	d055      	beq.n	80034f0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003444:	f7fd fc2a 	bl	8000c9c <HAL_GetTick>
 8003448:	0002      	movs	r2, r0
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003450:	429a      	cmp	r2, r3
 8003452:	d902      	bls.n	800345a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d142      	bne.n	80034e0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	21e0      	movs	r1, #224	@ 0xe0
 8003466:	438a      	bics	r2, r1
 8003468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	2382      	movs	r3, #130	@ 0x82
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	429a      	cmp	r2, r3
 8003474:	d113      	bne.n	800349e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	429a      	cmp	r2, r3
 8003480:	d005      	beq.n	800348e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	429a      	cmp	r2, r3
 800348c:	d107      	bne.n	800349e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2140      	movs	r1, #64	@ 0x40
 800349a:	438a      	bics	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034a2:	2380      	movs	r3, #128	@ 0x80
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d110      	bne.n	80034cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4916      	ldr	r1, [pc, #88]	@ (8003510 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80034b6:	400a      	ands	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2180      	movs	r1, #128	@ 0x80
 80034c6:	0189      	lsls	r1, r1, #6
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	225d      	movs	r2, #93	@ 0x5d
 80034d0:	2101      	movs	r1, #1
 80034d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	225c      	movs	r2, #92	@ 0x5c
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e010      	b.n	8003502 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d18e      	bne.n	800341e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b00a      	add	sp, #40	@ 0x28
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	20000000 	.word	0x20000000
 8003510:	ffffdfff 	.word	0xffffdfff

08003514 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	2382      	movs	r3, #130	@ 0x82
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	429a      	cmp	r2, r3
 800352a:	d113      	bne.n	8003554 <SPI_EndRxTransaction+0x40>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	429a      	cmp	r2, r3
 8003536:	d005      	beq.n	8003544 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	2380      	movs	r3, #128	@ 0x80
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	429a      	cmp	r2, r3
 8003542:	d107      	bne.n	8003554 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2140      	movs	r1, #64	@ 0x40
 8003550:	438a      	bics	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	0013      	movs	r3, r2
 800355e:	2200      	movs	r2, #0
 8003560:	2180      	movs	r1, #128	@ 0x80
 8003562:	f7ff fea7 	bl	80032b4 <SPI_WaitFlagStateUntilTimeout>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d007      	beq.n	800357a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356e:	2220      	movs	r2, #32
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e026      	b.n	80035c8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	2382      	movs	r3, #130	@ 0x82
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	429a      	cmp	r2, r3
 8003584:	d11f      	bne.n	80035c6 <SPI_EndRxTransaction+0xb2>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	429a      	cmp	r2, r3
 8003590:	d005      	beq.n	800359e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	429a      	cmp	r2, r3
 800359c:	d113      	bne.n	80035c6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	23c0      	movs	r3, #192	@ 0xc0
 80035a2:	00d9      	lsls	r1, r3, #3
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	0013      	movs	r3, r2
 80035ac:	2200      	movs	r2, #0
 80035ae:	f7ff ff0f 	bl	80033d0 <SPI_WaitFifoStateUntilTimeout>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d007      	beq.n	80035c6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	2220      	movs	r2, #32
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e000      	b.n	80035c8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	23c0      	movs	r3, #192	@ 0xc0
 80035e0:	0159      	lsls	r1, r3, #5
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	0013      	movs	r3, r2
 80035ea:	2200      	movs	r2, #0
 80035ec:	f7ff fef0 	bl	80033d0 <SPI_WaitFifoStateUntilTimeout>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d007      	beq.n	8003604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	2220      	movs	r2, #32
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e027      	b.n	8003654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	0013      	movs	r3, r2
 800360e:	2200      	movs	r2, #0
 8003610:	2180      	movs	r1, #128	@ 0x80
 8003612:	f7ff fe4f 	bl	80032b4 <SPI_WaitFlagStateUntilTimeout>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d007      	beq.n	800362a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	2220      	movs	r2, #32
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e014      	b.n	8003654 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	23c0      	movs	r3, #192	@ 0xc0
 800362e:	00d9      	lsls	r1, r3, #3
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	0013      	movs	r3, r2
 8003638:	2200      	movs	r2, #0
 800363a:	f7ff fec9 	bl	80033d0 <SPI_WaitFifoStateUntilTimeout>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d007      	beq.n	8003652 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	2220      	movs	r2, #32
 8003648:	431a      	orrs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e000      	b.n	8003654 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b004      	add	sp, #16
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e04a      	b.n	8003704 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	223d      	movs	r2, #61	@ 0x3d
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223c      	movs	r2, #60	@ 0x3c
 800367e:	2100      	movs	r1, #0
 8003680:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f7fd f98f 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223d      	movs	r2, #61	@ 0x3d
 800368e:	2102      	movs	r1, #2
 8003690:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	0019      	movs	r1, r3
 800369c:	0010      	movs	r0, r2
 800369e:	f000 f883 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2248      	movs	r2, #72	@ 0x48
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	223e      	movs	r2, #62	@ 0x3e
 80036ae:	2101      	movs	r1, #1
 80036b0:	5499      	strb	r1, [r3, r2]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223f      	movs	r2, #63	@ 0x3f
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2240      	movs	r2, #64	@ 0x40
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2241      	movs	r2, #65	@ 0x41
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2242      	movs	r2, #66	@ 0x42
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2243      	movs	r2, #67	@ 0x43
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2244      	movs	r2, #68	@ 0x44
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2245      	movs	r2, #69	@ 0x45
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2246      	movs	r2, #70	@ 0x46
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2247      	movs	r2, #71	@ 0x47
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	223d      	movs	r2, #61	@ 0x3d
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	223d      	movs	r2, #61	@ 0x3d
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e034      	b.n	800378e <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	223d      	movs	r2, #61	@ 0x3d
 8003728:	2102      	movs	r1, #2
 800372a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <HAL_TIM_Base_Start+0x8c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_TIM_Base_Start+0x3e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_TIM_Base_Start+0x90>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_TIM_Base_Start+0x3e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a16      	ldr	r2, [pc, #88]	@ (80037a0 <HAL_TIM_Base_Start+0x94>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d116      	bne.n	8003778 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <HAL_TIM_Base_Start+0x98>)
 8003752:	4013      	ands	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b06      	cmp	r3, #6
 800375a:	d016      	beq.n	800378a <HAL_TIM_Base_Start+0x7e>
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	025b      	lsls	r3, r3, #9
 8003762:	429a      	cmp	r2, r3
 8003764:	d011      	beq.n	800378a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003776:	e008      	b.n	800378a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2101      	movs	r1, #1
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e000      	b.n	800378c <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b004      	add	sp, #16
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	00010007 	.word	0x00010007

080037a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a36      	ldr	r2, [pc, #216]	@ (8003894 <TIM_Base_SetConfig+0xec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_Base_SetConfig+0x20>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a35      	ldr	r2, [pc, #212]	@ (8003898 <TIM_Base_SetConfig+0xf0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2270      	movs	r2, #112	@ 0x70
 80037cc:	4393      	bics	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003894 <TIM_Base_SetConfig+0xec>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003898 <TIM_Base_SetConfig+0xf0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00f      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2b      	ldr	r2, [pc, #172]	@ (800389c <TIM_Base_SetConfig+0xf4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a2a      	ldr	r2, [pc, #168]	@ (80038a0 <TIM_Base_SetConfig+0xf8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a29      	ldr	r2, [pc, #164]	@ (80038a4 <TIM_Base_SetConfig+0xfc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x62>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a28      	ldr	r2, [pc, #160]	@ (80038a8 <TIM_Base_SetConfig+0x100>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a27      	ldr	r2, [pc, #156]	@ (80038ac <TIM_Base_SetConfig+0x104>)
 800380e:	4013      	ands	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2280      	movs	r2, #128	@ 0x80
 8003820:	4393      	bics	r3, r2
 8003822:	001a      	movs	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a13      	ldr	r2, [pc, #76]	@ (8003894 <TIM_Base_SetConfig+0xec>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00b      	beq.n	8003862 <TIM_Base_SetConfig+0xba>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <TIM_Base_SetConfig+0xf8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <TIM_Base_SetConfig+0xba>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a13      	ldr	r2, [pc, #76]	@ (80038a4 <TIM_Base_SetConfig+0xfc>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d003      	beq.n	8003862 <TIM_Base_SetConfig+0xba>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <TIM_Base_SetConfig+0x100>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d103      	bne.n	800386a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2201      	movs	r2, #1
 8003882:	4393      	bics	r3, r2
 8003884:	001a      	movs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	611a      	str	r2, [r3, #16]
  }
}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b004      	add	sp, #16
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40000400 	.word	0x40000400
 800389c:	40002000 	.word	0x40002000
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40014400 	.word	0x40014400
 80038a8:	40014800 	.word	0x40014800
 80038ac:	fffffcff 	.word	0xfffffcff

080038b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223c      	movs	r2, #60	@ 0x3c
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e04f      	b.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223c      	movs	r2, #60	@ 0x3c
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223d      	movs	r2, #61	@ 0x3d
 80038d4:	2102      	movs	r1, #2
 80038d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a20      	ldr	r2, [pc, #128]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2270      	movs	r2, #112	@ 0x70
 8003908:	4393      	bics	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d009      	beq.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a12      	ldr	r2, [pc, #72]	@ (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a11      	ldr	r2, [pc, #68]	@ (800397c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10c      	bne.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2280      	movs	r2, #128	@ 0x80
 8003940:	4393      	bics	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	223d      	movs	r2, #61	@ 0x3d
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	223c      	movs	r2, #60	@ 0x3c
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40012c00 	.word	0x40012c00
 8003974:	ff0fffff 	.word	0xff0fffff
 8003978:	40000400 	.word	0x40000400
 800397c:	40014000 	.word	0x40014000

08003980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e046      	b.n	8003a20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2288      	movs	r2, #136	@ 0x88
 8003996:	589b      	ldr	r3, [r3, r2]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2284      	movs	r2, #132	@ 0x84
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f7fd f81c 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2288      	movs	r2, #136	@ 0x88
 80039b0:	2124      	movs	r1, #36	@ 0x24
 80039b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2101      	movs	r1, #1
 80039c0:	438a      	bics	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fa74 	bl	8003ebc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 f8cc 	bl	8003b74 <UART_SetConfig>
 80039dc:	0003      	movs	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e01c      	b.n	8003a20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	490d      	ldr	r1, [pc, #52]	@ (8003a28 <HAL_UART_Init+0xa8>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	212a      	movs	r1, #42	@ 0x2a
 8003a02:	438a      	bics	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2101      	movs	r1, #1
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fb03 	bl	8004024 <UART_CheckIdleState>
 8003a1e:	0003      	movs	r3, r0
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	ffffb7ff 	.word	0xffffb7ff

08003a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	1dbb      	adds	r3, r7, #6
 8003a3a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2288      	movs	r2, #136	@ 0x88
 8003a40:	589b      	ldr	r3, [r3, r2]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d000      	beq.n	8003a48 <HAL_UART_Transmit+0x1c>
 8003a46:	e090      	b.n	8003b6a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_Transmit+0x2a>
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e088      	b.n	8003b6c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	015b      	lsls	r3, r3, #5
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d109      	bne.n	8003a7a <HAL_UART_Transmit+0x4e>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	d001      	beq.n	8003a7a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e078      	b.n	8003b6c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2290      	movs	r2, #144	@ 0x90
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2288      	movs	r2, #136	@ 0x88
 8003a86:	2121      	movs	r1, #33	@ 0x21
 8003a88:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8a:	f7fd f907 	bl	8000c9c <HAL_GetTick>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1dba      	adds	r2, r7, #6
 8003a96:	2154      	movs	r1, #84	@ 0x54
 8003a98:	8812      	ldrh	r2, [r2, #0]
 8003a9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1dba      	adds	r2, r7, #6
 8003aa0:	2156      	movs	r1, #86	@ 0x56
 8003aa2:	8812      	ldrh	r2, [r2, #0]
 8003aa4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	2380      	movs	r3, #128	@ 0x80
 8003aac:	015b      	lsls	r3, r3, #5
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Transmit+0x98>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003acc:	e030      	b.n	8003b30 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2180      	movs	r1, #128	@ 0x80
 8003adc:	f000 fb4c 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	1e03      	subs	r3, r0, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2288      	movs	r2, #136	@ 0x88
 8003ae8:	2120      	movs	r1, #32
 8003aea:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e03d      	b.n	8003b6c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	001a      	movs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	05d2      	lsls	r2, r2, #23
 8003b02:	0dd2      	lsrs	r2, r2, #23
 8003b04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e007      	b.n	8003b1e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2256      	movs	r2, #86	@ 0x56
 8003b22:	5a9b      	ldrh	r3, [r3, r2]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b299      	uxth	r1, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2256      	movs	r2, #86	@ 0x56
 8003b2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2256      	movs	r2, #86	@ 0x56
 8003b34:	5a9b      	ldrh	r3, [r3, r2]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1c8      	bne.n	8003ace <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	0013      	movs	r3, r2
 8003b46:	2200      	movs	r2, #0
 8003b48:	2140      	movs	r1, #64	@ 0x40
 8003b4a:	f000 fb15 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2288      	movs	r2, #136	@ 0x88
 8003b56:	2120      	movs	r1, #32
 8003b58:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e006      	b.n	8003b6c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2288      	movs	r2, #136	@ 0x88
 8003b62:	2120      	movs	r1, #32
 8003b64:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b008      	add	sp, #32
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b7c:	231a      	movs	r3, #26
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4abc      	ldr	r2, [pc, #752]	@ (8003e94 <UART_SetConfig+0x320>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4ab7      	ldr	r2, [pc, #732]	@ (8003e98 <UART_SetConfig+0x324>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4aae      	ldr	r2, [pc, #696]	@ (8003e9c <UART_SetConfig+0x328>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4aa4      	ldr	r2, [pc, #656]	@ (8003ea0 <UART_SetConfig+0x32c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d127      	bne.n	8003c62 <UART_SetConfig+0xee>
 8003c12:	4ba4      	ldr	r3, [pc, #656]	@ (8003ea4 <UART_SetConfig+0x330>)
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	2203      	movs	r2, #3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d017      	beq.n	8003c4e <UART_SetConfig+0xda>
 8003c1e:	d81b      	bhi.n	8003c58 <UART_SetConfig+0xe4>
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d00a      	beq.n	8003c3a <UART_SetConfig+0xc6>
 8003c24:	d818      	bhi.n	8003c58 <UART_SetConfig+0xe4>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <UART_SetConfig+0xbc>
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d00a      	beq.n	8003c44 <UART_SetConfig+0xd0>
 8003c2e:	e013      	b.n	8003c58 <UART_SetConfig+0xe4>
 8003c30:	231b      	movs	r3, #27
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e058      	b.n	8003cec <UART_SetConfig+0x178>
 8003c3a:	231b      	movs	r3, #27
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2202      	movs	r2, #2
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e053      	b.n	8003cec <UART_SetConfig+0x178>
 8003c44:	231b      	movs	r3, #27
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	2204      	movs	r2, #4
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e04e      	b.n	8003cec <UART_SetConfig+0x178>
 8003c4e:	231b      	movs	r3, #27
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2208      	movs	r2, #8
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e049      	b.n	8003cec <UART_SetConfig+0x178>
 8003c58:	231b      	movs	r3, #27
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e044      	b.n	8003cec <UART_SetConfig+0x178>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a90      	ldr	r2, [pc, #576]	@ (8003ea8 <UART_SetConfig+0x334>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d127      	bne.n	8003cbc <UART_SetConfig+0x148>
 8003c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8003ea4 <UART_SetConfig+0x330>)
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	220c      	movs	r2, #12
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d017      	beq.n	8003ca8 <UART_SetConfig+0x134>
 8003c78:	d81b      	bhi.n	8003cb2 <UART_SetConfig+0x13e>
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d00a      	beq.n	8003c94 <UART_SetConfig+0x120>
 8003c7e:	d818      	bhi.n	8003cb2 <UART_SetConfig+0x13e>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <UART_SetConfig+0x116>
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d00a      	beq.n	8003c9e <UART_SetConfig+0x12a>
 8003c88:	e013      	b.n	8003cb2 <UART_SetConfig+0x13e>
 8003c8a:	231b      	movs	r3, #27
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e02b      	b.n	8003cec <UART_SetConfig+0x178>
 8003c94:	231b      	movs	r3, #27
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2202      	movs	r2, #2
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e026      	b.n	8003cec <UART_SetConfig+0x178>
 8003c9e:	231b      	movs	r3, #27
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e021      	b.n	8003cec <UART_SetConfig+0x178>
 8003ca8:	231b      	movs	r3, #27
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2208      	movs	r2, #8
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e01c      	b.n	8003cec <UART_SetConfig+0x178>
 8003cb2:	231b      	movs	r3, #27
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	2210      	movs	r2, #16
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e017      	b.n	8003cec <UART_SetConfig+0x178>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8003eac <UART_SetConfig+0x338>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d104      	bne.n	8003cd0 <UART_SetConfig+0x15c>
 8003cc6:	231b      	movs	r3, #27
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e00d      	b.n	8003cec <UART_SetConfig+0x178>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a76      	ldr	r2, [pc, #472]	@ (8003eb0 <UART_SetConfig+0x33c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d104      	bne.n	8003ce4 <UART_SetConfig+0x170>
 8003cda:	231b      	movs	r3, #27
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e003      	b.n	8003cec <UART_SetConfig+0x178>
 8003ce4:	231b      	movs	r3, #27
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	2210      	movs	r2, #16
 8003cea:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	2380      	movs	r3, #128	@ 0x80
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d000      	beq.n	8003cfa <UART_SetConfig+0x186>
 8003cf8:	e065      	b.n	8003dc6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003cfa:	231b      	movs	r3, #27
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d015      	beq.n	8003d30 <UART_SetConfig+0x1bc>
 8003d04:	dc18      	bgt.n	8003d38 <UART_SetConfig+0x1c4>
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d00d      	beq.n	8003d26 <UART_SetConfig+0x1b2>
 8003d0a:	dc15      	bgt.n	8003d38 <UART_SetConfig+0x1c4>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <UART_SetConfig+0x1a2>
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d005      	beq.n	8003d20 <UART_SetConfig+0x1ac>
 8003d14:	e010      	b.n	8003d38 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d16:	f7fe fc37 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	617b      	str	r3, [r7, #20]
        break;
 8003d1e:	e012      	b.n	8003d46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d20:	4b64      	ldr	r3, [pc, #400]	@ (8003eb4 <UART_SetConfig+0x340>)
 8003d22:	617b      	str	r3, [r7, #20]
        break;
 8003d24:	e00f      	b.n	8003d46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d26:	f7fe fba3 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	617b      	str	r3, [r7, #20]
        break;
 8003d2e:	e00a      	b.n	8003d46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	617b      	str	r3, [r7, #20]
        break;
 8003d36:	e006      	b.n	8003d46 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d3c:	231a      	movs	r3, #26
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
        break;
 8003d44:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d100      	bne.n	8003d4e <UART_SetConfig+0x1da>
 8003d4c:	e08d      	b.n	8003e6a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d52:	4b59      	ldr	r3, [pc, #356]	@ (8003eb8 <UART_SetConfig+0x344>)
 8003d54:	0052      	lsls	r2, r2, #1
 8003d56:	5ad3      	ldrh	r3, [r2, r3]
 8003d58:	0019      	movs	r1, r3
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7fc f9da 	bl	8000114 <__udivsi3>
 8003d60:	0003      	movs	r3, r0
 8003d62:	005a      	lsls	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	18d2      	adds	r2, r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0019      	movs	r1, r3
 8003d72:	0010      	movs	r0, r2
 8003d74:	f7fc f9ce 	bl	8000114 <__udivsi3>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d91c      	bls.n	8003dbc <UART_SetConfig+0x248>
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	2380      	movs	r3, #128	@ 0x80
 8003d86:	025b      	lsls	r3, r3, #9
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d217      	bcs.n	8003dbc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	200e      	movs	r0, #14
 8003d92:	183b      	adds	r3, r7, r0
 8003d94:	210f      	movs	r1, #15
 8003d96:	438a      	bics	r2, r1
 8003d98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2207      	movs	r2, #7
 8003da2:	4013      	ands	r3, r2
 8003da4:	b299      	uxth	r1, r3
 8003da6:	183b      	adds	r3, r7, r0
 8003da8:	183a      	adds	r2, r7, r0
 8003daa:	8812      	ldrh	r2, [r2, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	183a      	adds	r2, r7, r0
 8003db6:	8812      	ldrh	r2, [r2, #0]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	e056      	b.n	8003e6a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003dbc:	231a      	movs	r3, #26
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e051      	b.n	8003e6a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dc6:	231b      	movs	r3, #27
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d015      	beq.n	8003dfc <UART_SetConfig+0x288>
 8003dd0:	dc18      	bgt.n	8003e04 <UART_SetConfig+0x290>
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d00d      	beq.n	8003df2 <UART_SetConfig+0x27e>
 8003dd6:	dc15      	bgt.n	8003e04 <UART_SetConfig+0x290>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <UART_SetConfig+0x26e>
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d005      	beq.n	8003dec <UART_SetConfig+0x278>
 8003de0:	e010      	b.n	8003e04 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7fe fbd1 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8003de6:	0003      	movs	r3, r0
 8003de8:	617b      	str	r3, [r7, #20]
        break;
 8003dea:	e012      	b.n	8003e12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <UART_SetConfig+0x340>)
 8003dee:	617b      	str	r3, [r7, #20]
        break;
 8003df0:	e00f      	b.n	8003e12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fb3d 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8003df6:	0003      	movs	r3, r0
 8003df8:	617b      	str	r3, [r7, #20]
        break;
 8003dfa:	e00a      	b.n	8003e12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	617b      	str	r3, [r7, #20]
        break;
 8003e02:	e006      	b.n	8003e12 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e08:	231a      	movs	r3, #26
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
        break;
 8003e10:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d028      	beq.n	8003e6a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e1c:	4b26      	ldr	r3, [pc, #152]	@ (8003eb8 <UART_SetConfig+0x344>)
 8003e1e:	0052      	lsls	r2, r2, #1
 8003e20:	5ad3      	ldrh	r3, [r2, r3]
 8003e22:	0019      	movs	r1, r3
 8003e24:	6978      	ldr	r0, [r7, #20]
 8003e26:	f7fc f975 	bl	8000114 <__udivsi3>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	18d2      	adds	r2, r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	f7fc f969 	bl	8000114 <__udivsi3>
 8003e42:	0003      	movs	r3, r0
 8003e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d90a      	bls.n	8003e62 <UART_SetConfig+0x2ee>
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	2380      	movs	r3, #128	@ 0x80
 8003e50:	025b      	lsls	r3, r3, #9
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d205      	bcs.n	8003e62 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e003      	b.n	8003e6a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	231a      	movs	r3, #26
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	226a      	movs	r2, #106	@ 0x6a
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2268      	movs	r2, #104	@ 0x68
 8003e76:	2101      	movs	r1, #1
 8003e78:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e86:	231a      	movs	r3, #26
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	781b      	ldrb	r3, [r3, #0]
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b008      	add	sp, #32
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	cfff69f3 	.word	0xcfff69f3
 8003e98:	ffffcfff 	.word	0xffffcfff
 8003e9c:	11fff4ff 	.word	0x11fff4ff
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40004400 	.word	0x40004400
 8003eac:	40004800 	.word	0x40004800
 8003eb0:	40004c00 	.word	0x40004c00
 8003eb4:	00f42400 	.word	0x00f42400
 8003eb8:	080054e0 	.word	0x080054e0

08003ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	2208      	movs	r2, #8
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8004000 <UART_AdvFeatureConfig+0x144>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eea:	2201      	movs	r2, #1
 8003eec:	4013      	ands	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a43      	ldr	r2, [pc, #268]	@ (8004004 <UART_AdvFeatureConfig+0x148>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	0019      	movs	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a3b      	ldr	r2, [pc, #236]	@ (8004008 <UART_AdvFeatureConfig+0x14c>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	2204      	movs	r2, #4
 8003f30:	4013      	ands	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4a34      	ldr	r2, [pc, #208]	@ (800400c <UART_AdvFeatureConfig+0x150>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	2210      	movs	r2, #16
 8003f52:	4013      	ands	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004010 <UART_AdvFeatureConfig+0x154>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	2220      	movs	r2, #32
 8003f74:	4013      	ands	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	4a25      	ldr	r2, [pc, #148]	@ (8004014 <UART_AdvFeatureConfig+0x158>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	0019      	movs	r1, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	2240      	movs	r2, #64	@ 0x40
 8003f96:	4013      	ands	r3, r2
 8003f98:	d01d      	beq.n	8003fd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <UART_AdvFeatureConfig+0x15c>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	0019      	movs	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fb6:	2380      	movs	r3, #128	@ 0x80
 8003fb8:	035b      	lsls	r3, r3, #13
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d10b      	bne.n	8003fd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a15      	ldr	r2, [pc, #84]	@ (800401c <UART_AdvFeatureConfig+0x160>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	2280      	movs	r2, #128	@ 0x80
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <UART_AdvFeatureConfig+0x164>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  }
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	ffff7fff 	.word	0xffff7fff
 8004004:	fffdffff 	.word	0xfffdffff
 8004008:	fffeffff 	.word	0xfffeffff
 800400c:	fffbffff 	.word	0xfffbffff
 8004010:	ffffefff 	.word	0xffffefff
 8004014:	ffffdfff 	.word	0xffffdfff
 8004018:	ffefffff 	.word	0xffefffff
 800401c:	ff9fffff 	.word	0xff9fffff
 8004020:	fff7ffff 	.word	0xfff7ffff

08004024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b092      	sub	sp, #72	@ 0x48
 8004028:	af02      	add	r7, sp, #8
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2290      	movs	r2, #144	@ 0x90
 8004030:	2100      	movs	r1, #0
 8004032:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004034:	f7fc fe32 	bl	8000c9c <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2208      	movs	r2, #8
 8004044:	4013      	ands	r3, r2
 8004046:	2b08      	cmp	r3, #8
 8004048:	d12d      	bne.n	80040a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	2280      	movs	r2, #128	@ 0x80
 800404e:	0391      	lsls	r1, r2, #14
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4a47      	ldr	r2, [pc, #284]	@ (8004170 <UART_CheckIdleState+0x14c>)
 8004054:	9200      	str	r2, [sp, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	f000 f88e 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d022      	beq.n	80040a6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004060:	f3ef 8310 	mrs	r3, PRIMASK
 8004064:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004068:	63bb      	str	r3, [r7, #56]	@ 0x38
 800406a:	2301      	movs	r3, #1
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			@ (mov r8, r8)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2180      	movs	r1, #128	@ 0x80
 8004082:	438a      	bics	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2288      	movs	r2, #136	@ 0x88
 8004096:	2120      	movs	r1, #32
 8004098:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2284      	movs	r2, #132	@ 0x84
 800409e:	2100      	movs	r1, #0
 80040a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e060      	b.n	8004168 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2204      	movs	r2, #4
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d146      	bne.n	8004142 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	03d1      	lsls	r1, r2, #15
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004170 <UART_CheckIdleState+0x14c>)
 80040be:	9200      	str	r2, [sp, #0]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f000 f859 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 80040c6:	1e03      	subs	r3, r0, #0
 80040c8:	d03b      	beq.n	8004142 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80040d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d4:	2301      	movs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4922      	ldr	r1, [pc, #136]	@ (8004174 <UART_CheckIdleState+0x150>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004100:	61bb      	str	r3, [r7, #24]
  return(result);
 8004102:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004104:	633b      	str	r3, [r7, #48]	@ 0x30
 8004106:	2301      	movs	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			@ (mov r8, r8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2101      	movs	r1, #1
 800411e:	438a      	bics	r2, r1
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004124:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	228c      	movs	r2, #140	@ 0x8c
 8004132:	2120      	movs	r1, #32
 8004134:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2284      	movs	r2, #132	@ 0x84
 800413a:	2100      	movs	r1, #0
 800413c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e012      	b.n	8004168 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2288      	movs	r2, #136	@ 0x88
 8004146:	2120      	movs	r1, #32
 8004148:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	228c      	movs	r2, #140	@ 0x8c
 800414e:	2120      	movs	r1, #32
 8004150:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2284      	movs	r2, #132	@ 0x84
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b010      	add	sp, #64	@ 0x40
 800416e:	bd80      	pop	{r7, pc}
 8004170:	01ffffff 	.word	0x01ffffff
 8004174:	fffffedf 	.word	0xfffffedf

08004178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	e051      	b.n	800422e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	3301      	adds	r3, #1
 800418e:	d04e      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004190:	f7fc fd84 	bl	8000c9c <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	429a      	cmp	r2, r3
 800419e:	d302      	bcc.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e051      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2204      	movs	r2, #4
 80041b2:	4013      	ands	r3, r2
 80041b4:	d03b      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb6>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b80      	cmp	r3, #128	@ 0x80
 80041ba:	d038      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb6>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b40      	cmp	r3, #64	@ 0x40
 80041c0:	d035      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2208      	movs	r2, #8
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d111      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2208      	movs	r2, #8
 80041d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 f83c 	bl	8004258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2290      	movs	r2, #144	@ 0x90
 80041e4:	2108      	movs	r1, #8
 80041e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2284      	movs	r2, #132	@ 0x84
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e02c      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	401a      	ands	r2, r3
 8004200:	2380      	movs	r3, #128	@ 0x80
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	429a      	cmp	r2, r3
 8004206:	d112      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2280      	movs	r2, #128	@ 0x80
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0018      	movs	r0, r3
 8004216:	f000 f81f 	bl	8004258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2290      	movs	r2, #144	@ 0x90
 800421e:	2120      	movs	r1, #32
 8004220:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2284      	movs	r2, #132	@ 0x84
 8004226:	2100      	movs	r1, #0
 8004228:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e00f      	b.n	800424e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	4013      	ands	r3, r2
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	425a      	negs	r2, r3
 800423e:	4153      	adcs	r3, r2
 8004240:	b2db      	uxtb	r3, r3
 8004242:	001a      	movs	r2, r3
 8004244:	1dfb      	adds	r3, r7, #7
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d09e      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b004      	add	sp, #16
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08e      	sub	sp, #56	@ 0x38
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004260:	f3ef 8310 	mrs	r3, PRIMASK
 8004264:	617b      	str	r3, [r7, #20]
  return(result);
 8004266:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004268:	637b      	str	r3, [r7, #52]	@ 0x34
 800426a:	2301      	movs	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4926      	ldr	r1, [pc, #152]	@ (800431c <UART_EndRxTransfer+0xc4>)
 8004282:	400a      	ands	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004288:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004292:	f3ef 8310 	mrs	r3, PRIMASK
 8004296:	623b      	str	r3, [r7, #32]
  return(result);
 8004298:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800429a:	633b      	str	r3, [r7, #48]	@ 0x30
 800429c:	2301      	movs	r3, #1
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	f383 8810 	msr	PRIMASK, r3
}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	491b      	ldr	r1, [pc, #108]	@ (8004320 <UART_EndRxTransfer+0xc8>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042be:	f383 8810 	msr	PRIMASK, r3
}
 80042c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d118      	bne.n	80042fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042cc:	f3ef 8310 	mrs	r3, PRIMASK
 80042d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d6:	2301      	movs	r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f383 8810 	msr	PRIMASK, r3
}
 80042e0:	46c0      	nop			@ (mov r8, r8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2110      	movs	r1, #16
 80042ee:	438a      	bics	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f383 8810 	msr	PRIMASK, r3
}
 80042fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	228c      	movs	r2, #140	@ 0x8c
 8004302:	2120      	movs	r1, #32
 8004304:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b00e      	add	sp, #56	@ 0x38
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	fffffedf 	.word	0xfffffedf
 8004320:	effffffe 	.word	0xeffffffe

08004324 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2284      	movs	r2, #132	@ 0x84
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_UARTEx_DisableFifoMode+0x16>
 8004336:	2302      	movs	r3, #2
 8004338:	e027      	b.n	800438a <HAL_UARTEx_DisableFifoMode+0x66>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2284      	movs	r2, #132	@ 0x84
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2288      	movs	r2, #136	@ 0x88
 8004346:	2124      	movs	r1, #36	@ 0x24
 8004348:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2101      	movs	r1, #1
 800435e:	438a      	bics	r2, r1
 8004360:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a0b      	ldr	r2, [pc, #44]	@ (8004394 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2288      	movs	r2, #136	@ 0x88
 800437c:	2120      	movs	r1, #32
 800437e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2284      	movs	r2, #132	@ 0x84
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b004      	add	sp, #16
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	dfffffff 	.word	0xdfffffff

08004398 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2284      	movs	r2, #132	@ 0x84
 80043a6:	5c9b      	ldrb	r3, [r3, r2]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e02e      	b.n	800440e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2284      	movs	r2, #132	@ 0x84
 80043b4:	2101      	movs	r1, #1
 80043b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2288      	movs	r2, #136	@ 0x88
 80043bc:	2124      	movs	r1, #36	@ 0x24
 80043be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	438a      	bics	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	08d9      	lsrs	r1, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 f854 	bl	800449c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2288      	movs	r2, #136	@ 0x88
 8004400:	2120      	movs	r1, #32
 8004402:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2284      	movs	r2, #132	@ 0x84
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b004      	add	sp, #16
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2284      	movs	r2, #132	@ 0x84
 8004426:	5c9b      	ldrb	r3, [r3, r2]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800442c:	2302      	movs	r3, #2
 800442e:	e02f      	b.n	8004490 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2284      	movs	r2, #132	@ 0x84
 8004434:	2101      	movs	r1, #1
 8004436:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2288      	movs	r2, #136	@ 0x88
 800443c:	2124      	movs	r1, #36	@ 0x24
 800443e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2101      	movs	r1, #1
 8004454:	438a      	bics	r2, r1
 8004456:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4a0e      	ldr	r2, [pc, #56]	@ (8004498 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f000 f813 	bl	800449c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2288      	movs	r2, #136	@ 0x88
 8004482:	2120      	movs	r1, #32
 8004484:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2284      	movs	r2, #132	@ 0x84
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b004      	add	sp, #16
 8004496:	bd80      	pop	{r7, pc}
 8004498:	f1ffffff 	.word	0xf1ffffff

0800449c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800449c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	226a      	movs	r2, #106	@ 0x6a
 80044b0:	2101      	movs	r1, #1
 80044b2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2268      	movs	r2, #104	@ 0x68
 80044b8:	2101      	movs	r1, #1
 80044ba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044bc:	e043      	b.n	8004546 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044be:	260f      	movs	r6, #15
 80044c0:	19bb      	adds	r3, r7, r6
 80044c2:	2208      	movs	r2, #8
 80044c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044c6:	200e      	movs	r0, #14
 80044c8:	183b      	adds	r3, r7, r0
 80044ca:	2208      	movs	r2, #8
 80044cc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	0e5b      	lsrs	r3, r3, #25
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	240d      	movs	r4, #13
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	2107      	movs	r1, #7
 80044de:	400a      	ands	r2, r1
 80044e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	0f5b      	lsrs	r3, r3, #29
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	250c      	movs	r5, #12
 80044ee:	197b      	adds	r3, r7, r5
 80044f0:	2107      	movs	r1, #7
 80044f2:	400a      	ands	r2, r1
 80044f4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044f6:	183b      	adds	r3, r7, r0
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	197a      	adds	r2, r7, r5
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	4914      	ldr	r1, [pc, #80]	@ (8004550 <UARTEx_SetNbDataToProcess+0xb4>)
 8004500:	5c8a      	ldrb	r2, [r1, r2]
 8004502:	435a      	muls	r2, r3
 8004504:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004506:	197b      	adds	r3, r7, r5
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <UARTEx_SetNbDataToProcess+0xb8>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800450e:	0019      	movs	r1, r3
 8004510:	f7fb fe8a 	bl	8000228 <__divsi3>
 8004514:	0003      	movs	r3, r0
 8004516:	b299      	uxth	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	226a      	movs	r2, #106	@ 0x6a
 800451c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800451e:	19bb      	adds	r3, r7, r6
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	193a      	adds	r2, r7, r4
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	490a      	ldr	r1, [pc, #40]	@ (8004550 <UARTEx_SetNbDataToProcess+0xb4>)
 8004528:	5c8a      	ldrb	r2, [r1, r2]
 800452a:	435a      	muls	r2, r3
 800452c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800452e:	193b      	adds	r3, r7, r4
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <UARTEx_SetNbDataToProcess+0xb8>)
 8004534:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004536:	0019      	movs	r1, r3
 8004538:	f7fb fe76 	bl	8000228 <__divsi3>
 800453c:	0003      	movs	r3, r0
 800453e:	b299      	uxth	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2268      	movs	r2, #104	@ 0x68
 8004544:	5299      	strh	r1, [r3, r2]
}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	b005      	add	sp, #20
 800454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	080054f8 	.word	0x080054f8
 8004554:	08005500 	.word	0x08005500

08004558 <delay_us>:

extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim6;
extern I2C_HandleTypeDef hi2c1;

void delay_us(int us){
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <delay_us+0x28>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us);
 8004568:	46c0      	nop			@ (mov r8, r8)
 800456a:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <delay_us+0x28>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	d3f9      	bcc.n	800456a <delay_us+0x12>
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	46c0      	nop			@ (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000130 	.word	0x20000130

08004584 <i2c_send>:

uint8_t i2c_send(uint8_t addr, uint8_t reg, uint8_t *value){
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af04      	add	r7, sp, #16
 800458a:	603a      	str	r2, [r7, #0]
 800458c:	1dfb      	adds	r3, r7, #7
 800458e:	1c02      	adds	r2, r0, #0
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	1dbb      	adds	r3, r7, #6
 8004594:	1c0a      	adds	r2, r1, #0
 8004596:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(&hi2c1,addr,reg,1,value,1,100);
 8004598:	1dfb      	adds	r3, r7, #7
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b299      	uxth	r1, r3
 800459e:	1dbb      	adds	r3, r7, #6
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4807      	ldr	r0, [pc, #28]	@ (80045c4 <i2c_send+0x40>)
 80045a6:	2364      	movs	r3, #100	@ 0x64
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	2301      	movs	r3, #1
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2301      	movs	r3, #1
 80045b4:	f7fc fe98 	bl	80012e8 <HAL_I2C_Mem_Write>
 80045b8:	0003      	movs	r3, r0
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b002      	add	sp, #8
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			@ (mov r8, r8)
 80045c4:	20000078 	.word	0x20000078

080045c8 <ov2640_init>:
uint8_t i2c_receive(uint8_t addr, uint8_t reg, uint8_t *value){
	HAL_I2C_Mem_Read(&hi2c1,addr,reg,1,value,1,HAL_MAX_DELAY);
	return *value;
}

void ov2640_init(void){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
	uint8_t values[2] = {0x01,0x80};
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <ov2640_init+0x34>)
 80045d2:	801a      	strh	r2, [r3, #0]
	i2c_send(DEV_ADDR_SEND,0xff,&values[0]);		//Set to page 1
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	001a      	movs	r2, r3
 80045d8:	21ff      	movs	r1, #255	@ 0xff
 80045da:	2060      	movs	r0, #96	@ 0x60
 80045dc:	f7ff ffd2 	bl	8004584 <i2c_send>
	i2c_send(DEV_ADDR_SEND,0x12,&values[1]);	//Software reset
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	3301      	adds	r3, #1
 80045e4:	001a      	movs	r2, r3
 80045e6:	2112      	movs	r1, #18
 80045e8:	2060      	movs	r0, #96	@ 0x60
 80045ea:	f7ff ffcb 	bl	8004584 <i2c_send>
	HAL_Delay(10);  //100 ms
 80045ee:	200a      	movs	r0, #10
 80045f0:	f7fc fb5e 	bl	8000cb0 <HAL_Delay>
}
 80045f4:	46c0      	nop			@ (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	ffff8001 	.word	0xffff8001

08004600 <ov2640_config>:
		HAL_Delay(10);
		reg_vals++;
	}
}

void ov2640_config(const struct sensor_reg *config_vals){
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	uint8_t value = config_vals->value;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	789a      	ldrb	r2, [r3, #2]
 800460c:	210f      	movs	r1, #15
 800460e:	187b      	adds	r3, r7, r1
 8004610:	701a      	strb	r2, [r3, #0]
	i2c_send(DEV_ADDR_SEND, config_vals->reg_addr, &value);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	187a      	adds	r2, r7, r1
 800461a:	0019      	movs	r1, r3
 800461c:	2060      	movs	r0, #96	@ 0x60
 800461e:	f7ff ffb1 	bl	8004584 <i2c_send>
	HAL_Delay(10);
 8004622:	200a      	movs	r0, #10
 8004624:	f7fc fb44 	bl	8000cb0 <HAL_Delay>
}
 8004628:	46c0      	nop			@ (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	b004      	add	sp, #16
 800462e:	bd80      	pop	{r7, pc}

08004630 <ov2640_config_bulk>:

void ov2640_config_bulk(const struct sensor_reg *config_vals){
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	uint8_t value;
	while((config_vals->reg_addr != 0xff) || (config_vals->value != 0xff)){
 8004638:	e012      	b.n	8004660 <ov2640_config_bulk+0x30>
		value = config_vals->value;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	789a      	ldrb	r2, [r3, #2]
 800463e:	210f      	movs	r1, #15
 8004640:	187b      	adds	r3, r7, r1
 8004642:	701a      	strb	r2, [r3, #0]
		i2c_send(DEV_ADDR_SEND,config_vals->reg_addr,&value);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	187a      	adds	r2, r7, r1
 800464c:	0019      	movs	r1, r3
 800464e:	2060      	movs	r0, #96	@ 0x60
 8004650:	f7ff ff98 	bl	8004584 <i2c_send>
		HAL_Delay(10);
 8004654:	200a      	movs	r0, #10
 8004656:	f7fc fb2b 	bl	8000cb0 <HAL_Delay>
		config_vals++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	607b      	str	r3, [r7, #4]
	while((config_vals->reg_addr != 0xff) || (config_vals->value != 0xff)){
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	2bff      	cmp	r3, #255	@ 0xff
 8004666:	d1e8      	bne.n	800463a <ov2640_config_bulk+0xa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	789b      	ldrb	r3, [r3, #2]
 800466c:	2bff      	cmp	r3, #255	@ 0xff
 800466e:	d1e4      	bne.n	800463a <ov2640_config_bulk+0xa>
	}
}
 8004670:	46c0      	nop			@ (mov r8, r8)
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b004      	add	sp, #16
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <i2c_config>:

void ov2640_contrast(const struct sensor_reg *contrast_vals){
	ov2640_config(contrast_vals);
}

void i2c_config(void){
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
	ov2640_init();
 8004680:	f7ff ffa2 	bl	80045c8 <ov2640_init>
    ov2640_config_bulk(OV2640_JPEG_INIT);
 8004684:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <i2c_config+0x40>)
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff ffd2 	bl	8004630 <ov2640_config_bulk>
	ov2640_config_bulk(OV2640_YUV422);
 800468c:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <i2c_config+0x44>)
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff ffce 	bl	8004630 <ov2640_config_bulk>
	ov2640_config_bulk(OV2640_JPEG);
 8004694:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <i2c_config+0x48>)
 8004696:	0018      	movs	r0, r3
 8004698:	f7ff ffca 	bl	8004630 <ov2640_config_bulk>
	ov2640_config(init1);
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <i2c_config+0x4c>)
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff ffae 	bl	8004600 <ov2640_config>
	ov2640_config(init2);
 80046a4:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <i2c_config+0x50>)
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7ff ffaa 	bl	8004600 <ov2640_config>
	ov2640_config_bulk(OV2640_640x480_JPEG);
 80046ac:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <i2c_config+0x54>)
 80046ae:	0018      	movs	r0, r3
 80046b0:	f7ff ffbe 	bl	8004630 <ov2640_config_bulk>
	//ov2640_config_bulk(OV2640_SHARPNESS_LEVEL6);
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	08005508 	.word	0x08005508
 80046c0:	08005828 	.word	0x08005828
 80046c4:	08005804 	.word	0x08005804
 80046c8:	080058f4 	.word	0x080058f4
 80046cc:	080058f8 	.word	0x080058f8
 80046d0:	08005850 	.word	0x08005850

080046d4 <bus_read>:
int i = 0;

uint8_t rx_spi_buf;
uint8_t iden = 0;	// used to determine if the spi is reading or writing

uint8_t bus_read(uint8_t address){
 80046d4:	b5b0      	push	{r4, r5, r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	0002      	movs	r2, r0
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	701a      	strb	r2, [r3, #0]
	uint8_t value;
	CS_LOW;
 80046e0:	2380      	movs	r3, #128	@ 0x80
 80046e2:	015b      	lsls	r3, r3, #5
 80046e4:	4810      	ldr	r0, [pc, #64]	@ (8004728 <bus_read+0x54>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	0019      	movs	r1, r3
 80046ea:	f7fc fd3a 	bl	8001162 <HAL_GPIO_WritePin>
	spi_readwritebyte(address);
 80046ee:	1dfb      	adds	r3, r7, #7
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 f884 	bl	8004800 <spi_readwritebyte>
	iden = 0;
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <bus_read+0x58>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
	value = spi_readwritebyte(0x00);
 80046fe:	250f      	movs	r5, #15
 8004700:	197c      	adds	r4, r7, r5
 8004702:	2000      	movs	r0, #0
 8004704:	f000 f87c 	bl	8004800 <spi_readwritebyte>
 8004708:	0003      	movs	r3, r0
 800470a:	7023      	strb	r3, [r4, #0]
	CS_HIGH;
 800470c:	2380      	movs	r3, #128	@ 0x80
 800470e:	015b      	lsls	r3, r3, #5
 8004710:	4805      	ldr	r0, [pc, #20]	@ (8004728 <bus_read+0x54>)
 8004712:	2201      	movs	r2, #1
 8004714:	0019      	movs	r1, r3
 8004716:	f7fc fd24 	bl	8001162 <HAL_GPIO_WritePin>
	return value;
 800471a:	197b      	adds	r3, r7, r5
 800471c:	781b      	ldrb	r3, [r3, #0]
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bdb0      	pop	{r4, r5, r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	50000400 	.word	0x50000400
 800472c:	200040a8 	.word	0x200040a8

08004730 <bus_write>:


uint8_t bus_write(uint8_t address, uint8_t value){
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	0002      	movs	r2, r0
 8004738:	1dfb      	adds	r3, r7, #7
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	1dbb      	adds	r3, r7, #6
 800473e:	1c0a      	adds	r2, r1, #0
 8004740:	701a      	strb	r2, [r3, #0]
	iden = 1;
 8004742:	4b14      	ldr	r3, [pc, #80]	@ (8004794 <bus_write+0x64>)
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
	CS_LOW;
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	015b      	lsls	r3, r3, #5
 800474c:	4812      	ldr	r0, [pc, #72]	@ (8004798 <bus_write+0x68>)
 800474e:	2200      	movs	r2, #0
 8004750:	0019      	movs	r1, r3
 8004752:	f7fc fd06 	bl	8001162 <HAL_GPIO_WritePin>
	delay_us(100);
 8004756:	2064      	movs	r0, #100	@ 0x64
 8004758:	f7ff fefe 	bl	8004558 <delay_us>
	spi_readwritebyte(address);
 800475c:	1dfb      	adds	r3, r7, #7
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	0018      	movs	r0, r3
 8004762:	f000 f84d 	bl	8004800 <spi_readwritebyte>
	delay_us(100);
 8004766:	2064      	movs	r0, #100	@ 0x64
 8004768:	f7ff fef6 	bl	8004558 <delay_us>
	spi_readwritebyte(value);
 800476c:	1dbb      	adds	r3, r7, #6
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	0018      	movs	r0, r3
 8004772:	f000 f845 	bl	8004800 <spi_readwritebyte>
	delay_us(100);
 8004776:	2064      	movs	r0, #100	@ 0x64
 8004778:	f7ff feee 	bl	8004558 <delay_us>
	CS_HIGH;
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	015b      	lsls	r3, r3, #5
 8004780:	4805      	ldr	r0, [pc, #20]	@ (8004798 <bus_write+0x68>)
 8004782:	2201      	movs	r2, #1
 8004784:	0019      	movs	r1, r3
 8004786:	f7fc fcec 	bl	8001162 <HAL_GPIO_WritePin>
	return 1;
 800478a:	2301      	movs	r3, #1
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}
 8004794:	200040a8 	.word	0x200040a8
 8004798:	50000400 	.word	0x50000400

0800479c <read_reg>:

uint8_t read_reg(uint8_t addr){
 800479c:	b5b0      	push	{r4, r5, r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	0002      	movs	r2, r0
 80047a4:	1dfb      	adds	r3, r7, #7
 80047a6:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	data = bus_read(addr&0x7F);
 80047a8:	1dfb      	adds	r3, r7, #7
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	227f      	movs	r2, #127	@ 0x7f
 80047ae:	4013      	ands	r3, r2
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	250f      	movs	r5, #15
 80047b4:	197c      	adds	r4, r7, r5
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff ff8c 	bl	80046d4 <bus_read>
 80047bc:	0003      	movs	r3, r0
 80047be:	7023      	strb	r3, [r4, #0]
	return data;
 80047c0:	197b      	adds	r3, r7, r5
 80047c2:	781b      	ldrb	r3, [r3, #0]
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b004      	add	sp, #16
 80047ca:	bdb0      	pop	{r4, r5, r7, pc}

080047cc <write_reg>:

void write_reg(uint8_t addr, uint8_t data){
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	0002      	movs	r2, r0
 80047d4:	1dfb      	adds	r3, r7, #7
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	1dbb      	adds	r3, r7, #6
 80047da:	1c0a      	adds	r2, r1, #0
 80047dc:	701a      	strb	r2, [r3, #0]
	bus_write(addr|0x80,data);
 80047de:	1dfb      	adds	r3, r7, #7
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2280      	movs	r2, #128	@ 0x80
 80047e4:	4252      	negs	r2, r2
 80047e6:	4313      	orrs	r3, r2
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	1dbb      	adds	r3, r7, #6
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	0019      	movs	r1, r3
 80047f0:	0010      	movs	r0, r2
 80047f2:	f7ff ff9d 	bl	8004730 <bus_write>
}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b002      	add	sp, #8
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <spi_readwritebyte>:

uint8_t spi_readwritebyte(uint8_t data){
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	0002      	movs	r2, r0
 8004808:	1dfb      	adds	r3, r7, #7
 800480a:	701a      	strb	r2, [r3, #0]
	uint8_t retry = 0;
 800480c:	230f      	movs	r3, #15
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
	uint8_t ret_val = 0;
 8004814:	230e      	movs	r3, #14
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
	while(__HAL_SPI_GET_FLAG(&hspi2,SPI_FLAG_TXE) == RESET){
 800481c:	e00b      	b.n	8004836 <spi_readwritebyte+0x36>
		retry++;
 800481e:	210f      	movs	r1, #15
 8004820:	187b      	adds	r3, r7, r1
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	187b      	adds	r3, r7, r1
 8004826:	3201      	adds	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
		if(retry > 200)
 800482a:	187b      	adds	r3, r7, r1
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004830:	d901      	bls.n	8004836 <spi_readwritebyte+0x36>
			return 0;
 8004832:	2300      	movs	r3, #0
 8004834:	e037      	b.n	80048a6 <spi_readwritebyte+0xa6>
	while(__HAL_SPI_GET_FLAG(&hspi2,SPI_FLAG_TXE) == RESET){
 8004836:	4b1e      	ldr	r3, [pc, #120]	@ (80048b0 <spi_readwritebyte+0xb0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2202      	movs	r2, #2
 800483e:	4013      	ands	r3, r2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d1ec      	bne.n	800481e <spi_readwritebyte+0x1e>
	}
	HAL_SPI_Transmit(&hspi2,&data,1,100);
 8004844:	1df9      	adds	r1, r7, #7
 8004846:	481a      	ldr	r0, [pc, #104]	@ (80048b0 <spi_readwritebyte+0xb0>)
 8004848:	2364      	movs	r3, #100	@ 0x64
 800484a:	2201      	movs	r2, #1
 800484c:	f7fe f89e 	bl	800298c <HAL_SPI_Transmit>
	retry = 0;
 8004850:	230f      	movs	r3, #15
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
	while(__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_BSY) == SET)
 8004858:	e00b      	b.n	8004872 <spi_readwritebyte+0x72>
	{
		retry++;
 800485a:	210f      	movs	r1, #15
 800485c:	187b      	adds	r3, r7, r1
 800485e:	781a      	ldrb	r2, [r3, #0]
 8004860:	187b      	adds	r3, r7, r1
 8004862:	3201      	adds	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
		//debug_spi_func(retry);
		if(retry>200){
 8004866:	187b      	adds	r3, r7, r1
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2bc8      	cmp	r3, #200	@ 0xc8
 800486c:	d901      	bls.n	8004872 <spi_readwritebyte+0x72>
			return 0;
 800486e:	2300      	movs	r3, #0
 8004870:	e019      	b.n	80048a6 <spi_readwritebyte+0xa6>
	while(__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_BSY) == SET)
 8004872:	4b0f      	ldr	r3, [pc, #60]	@ (80048b0 <spi_readwritebyte+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2280      	movs	r2, #128	@ 0x80
 800487a:	4013      	ands	r3, r2
 800487c:	2b80      	cmp	r3, #128	@ 0x80
 800487e:	d0ec      	beq.n	800485a <spi_readwritebyte+0x5a>
		}
	}
	if(!iden){
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <spi_readwritebyte+0xb4>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10d      	bne.n	80048a4 <spi_readwritebyte+0xa4>
		HAL_SPI_Receive(&hspi2,&ret_val,1,HAL_MAX_DELAY);
 8004888:	2301      	movs	r3, #1
 800488a:	425b      	negs	r3, r3
 800488c:	240e      	movs	r4, #14
 800488e:	1939      	adds	r1, r7, r4
 8004890:	4807      	ldr	r0, [pc, #28]	@ (80048b0 <spi_readwritebyte+0xb0>)
 8004892:	2201      	movs	r2, #1
 8004894:	f7fe f9da 	bl	8002c4c <HAL_SPI_Receive>
		iden = 1;
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <spi_readwritebyte+0xb4>)
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]
		return ret_val;
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	e000      	b.n	80048a6 <spi_readwritebyte+0xa6>
	}
	else
		return 1;
 80048a4:	2301      	movs	r3, #1
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b005      	add	sp, #20
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	200000cc 	.word	0x200000cc
 80048b4:	200040a8 	.word	0x200040a8

080048b8 <flush_fifo>:

void flush_fifo(void){
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
	uint8_t temp;
	write_reg(ARDUCHIP_FIFO,FIFO_CLEAR_MASK);
 80048be:	2101      	movs	r1, #1
 80048c0:	2004      	movs	r0, #4
 80048c2:	f7ff ff83 	bl	80047cc <write_reg>
	temp = read_reg(ARDUCHIP_FIFO);
 80048c6:	1dfc      	adds	r4, r7, #7
 80048c8:	2004      	movs	r0, #4
 80048ca:	f7ff ff67 	bl	800479c <read_reg>
 80048ce:	0003      	movs	r3, r0
 80048d0:	7023      	strb	r3, [r4, #0]
	debug_spi_func(temp);
 80048d2:	1dfb      	adds	r3, r7, #7
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 f8f4 	bl	8004ac4 <debug_spi_func>
}
 80048dc:	46c0      	nop			@ (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	b003      	add	sp, #12
 80048e2:	bd90      	pop	{r4, r7, pc}

080048e4 <clear_fifo_flag>:

void clear_fifo_flag(void){
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO,FIFO_CLEAR_MASK);
 80048e8:	2101      	movs	r1, #1
 80048ea:	2004      	movs	r0, #4
 80048ec:	f7ff ff6e 	bl	80047cc <write_reg>
}
 80048f0:	46c0      	nop			@ (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <start_capture>:
	uint8_t data;
	data = bus_read(SINGLE_FIFO_READ);
	return data;
}

void start_capture(void){
 80048f6:	b580      	push	{r7, lr}
 80048f8:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO,FIFO_START_MASK);
 80048fa:	2102      	movs	r1, #2
 80048fc:	2004      	movs	r0, #4
 80048fe:	f7ff ff65 	bl	80047cc <write_reg>
}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <get_bit>:

uint8_t get_bit(uint8_t addr, uint8_t bit){
 8004908:	b5b0      	push	{r4, r5, r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	0002      	movs	r2, r0
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	1dbb      	adds	r3, r7, #6
 8004916:	1c0a      	adds	r2, r1, #0
 8004918:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
	temp = read_reg(addr);
 800491a:	250f      	movs	r5, #15
 800491c:	197c      	adds	r4, r7, r5
 800491e:	1dfb      	adds	r3, r7, #7
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	0018      	movs	r0, r3
 8004924:	f7ff ff3a 	bl	800479c <read_reg>
 8004928:	0003      	movs	r3, r0
 800492a:	7023      	strb	r3, [r4, #0]
	temp = temp & bit;
 800492c:	0028      	movs	r0, r5
 800492e:	183b      	adds	r3, r7, r0
 8004930:	183a      	adds	r2, r7, r0
 8004932:	1db9      	adds	r1, r7, #6
 8004934:	7812      	ldrb	r2, [r2, #0]
 8004936:	7809      	ldrb	r1, [r1, #0]
 8004938:	400a      	ands	r2, r1
 800493a:	701a      	strb	r2, [r3, #0]
	return temp;
 800493c:	183b      	adds	r3, r7, r0
 800493e:	781b      	ldrb	r3, [r3, #0]
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b004      	add	sp, #16
 8004946:	bdb0      	pop	{r4, r5, r7, pc}

08004948 <read_fifo_length>:
	uint8_t temp;
	temp = read_reg(addr);
	write_reg(addr,temp|bit);
}

uint32_t read_fifo_length(void){
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
	uint32_t len1,len2,len3,len=0;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(0x42);
 8004952:	2042      	movs	r0, #66	@ 0x42
 8004954:	f7ff ff22 	bl	800479c <read_reg>
 8004958:	0003      	movs	r3, r0
 800495a:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(0x43);
 800495c:	2043      	movs	r0, #67	@ 0x43
 800495e:	f7ff ff1d 	bl	800479c <read_reg>
 8004962:	0003      	movs	r3, r0
 8004964:	607b      	str	r3, [r7, #4]
	len3 = read_reg(0x44) & 0x7f;
 8004966:	2044      	movs	r0, #68	@ 0x44
 8004968:	f7ff ff18 	bl	800479c <read_reg>
 800496c:	0003      	movs	r3, r0
 800496e:	001a      	movs	r2, r3
 8004970:	237f      	movs	r3, #127	@ 0x7f
 8004972:	4013      	ands	r3, r2
 8004974:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	041a      	lsls	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	431a      	orrs	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	0a5b      	lsrs	r3, r3, #9
 8004988:	60fb      	str	r3, [r7, #12]
	return len;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	b004      	add	sp, #16
 8004992:	bd80      	pop	{r7, pc}

08004994 <set_fifo_burst>:
	uint8_t temp;
	temp = read_reg(addr);
	write_reg(addr,temp & (~bit));
}

void set_fifo_burst(void){
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af02      	add	r7, sp, #8
	uint8_t burst_fifo_read = 0x3C;
 800499a:	1dfb      	adds	r3, r7, #7
 800499c:	223c      	movs	r2, #60	@ 0x3c
 800499e:	701a      	strb	r2, [r3, #0]
	uint8_t empty;
	HAL_SPI_TransmitReceive(&hspi2,&burst_fifo_read,&empty,1,HAL_MAX_DELAY);
 80049a0:	1dba      	adds	r2, r7, #6
 80049a2:	1df9      	adds	r1, r7, #7
 80049a4:	4805      	ldr	r0, [pc, #20]	@ (80049bc <set_fifo_burst+0x28>)
 80049a6:	2301      	movs	r3, #1
 80049a8:	425b      	negs	r3, r3
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2301      	movs	r3, #1
 80049ae:	f7fe fa9f 	bl	8002ef0 <HAL_SPI_TransmitReceive>
}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b002      	add	sp, #8
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	200000cc 	.word	0x200000cc

080049c0 <ov2640_capture>:

void ov2640_capture(void){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	flush_fifo();
 80049c4:	f7ff ff78 	bl	80048b8 <flush_fifo>
	clear_fifo_flag();
 80049c8:	f7ff ff8c 	bl	80048e4 <clear_fifo_flag>
	start_capture();
 80049cc:	f7ff ff93 	bl	80048f6 <start_capture>
	while(!get_bit(0x41,0x08));
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	2108      	movs	r1, #8
 80049d4:	2041      	movs	r0, #65	@ 0x41
 80049d6:	f7ff ff97 	bl	8004908 <get_bit>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d0f9      	beq.n	80049d2 <ov2640_capture+0x12>
	length = read_fifo_length();
 80049de:	f7ff ffb3 	bl	8004948 <read_fifo_length>
 80049e2:	0002      	movs	r2, r0
 80049e4:	4b21      	ldr	r3, [pc, #132]	@ (8004a6c <ov2640_capture+0xac>)
 80049e6:	601a      	str	r2, [r3, #0]
	//implement something to dynamically change the buffers
	sample_buffer = (length >= 16000) ? 16000 : length;
 80049e8:	4b20      	ldr	r3, [pc, #128]	@ (8004a6c <ov2640_capture+0xac>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	22fa      	movs	r2, #250	@ 0xfa
 80049ee:	0192      	lsls	r2, r2, #6
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <ov2640_capture+0x38>
 80049f4:	23fa      	movs	r3, #250	@ 0xfa
 80049f6:	019b      	lsls	r3, r3, #6
 80049f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <ov2640_capture+0xb0>)
 80049fa:	6013      	str	r3, [r2, #0]
	picbuf = Buf1;
 80049fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <ov2640_capture+0xb4>)
 80049fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004a78 <ov2640_capture+0xb8>)
 8004a00:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8004a02:	2380      	movs	r3, #128	@ 0x80
 8004a04:	015b      	lsls	r3, r3, #5
 8004a06:	481d      	ldr	r0, [pc, #116]	@ (8004a7c <ov2640_capture+0xbc>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	f7fc fba9 	bl	8001162 <HAL_GPIO_WritePin>
	set_fifo_burst();
 8004a10:	f7ff ffc0 	bl	8004994 <set_fifo_burst>
	HAL_SPI_Receive(&hspi2,picbuf,sample_buffer,HAL_MAX_DELAY);
 8004a14:	4b17      	ldr	r3, [pc, #92]	@ (8004a74 <ov2640_capture+0xb4>)
 8004a16:	6819      	ldr	r1, [r3, #0]
 8004a18:	4b15      	ldr	r3, [pc, #84]	@ (8004a70 <ov2640_capture+0xb0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	2301      	movs	r3, #1
 8004a20:	425b      	negs	r3, r3
 8004a22:	4817      	ldr	r0, [pc, #92]	@ (8004a80 <ov2640_capture+0xc0>)
 8004a24:	f7fe f912 	bl	8002c4c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8004a28:	2380      	movs	r3, #128	@ 0x80
 8004a2a:	015b      	lsls	r3, r3, #5
 8004a2c:	4813      	ldr	r0, [pc, #76]	@ (8004a7c <ov2640_capture+0xbc>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	0019      	movs	r1, r3
 8004a32:	f7fc fb96 	bl	8001162 <HAL_GPIO_WritePin>
	for( i = 0 ; i < sample_buffer; i++)
 8004a36:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <ov2640_capture+0xc4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e00b      	b.n	8004a56 <ov2640_capture+0x96>
			send_pic(Buf1[i]);
 8004a3e:	4b11      	ldr	r3, [pc, #68]	@ (8004a84 <ov2640_capture+0xc4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a0d      	ldr	r2, [pc, #52]	@ (8004a78 <ov2640_capture+0xb8>)
 8004a44:	5cd3      	ldrb	r3, [r2, r3]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 f81e 	bl	8004a88 <send_pic>
	for( i = 0 ; i < sample_buffer; i++)
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <ov2640_capture+0xc4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <ov2640_capture+0xc4>)
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <ov2640_capture+0xc4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <ov2640_capture+0xb0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d3ec      	bcc.n	8004a3e <ov2640_capture+0x7e>
}
 8004a64:	46c0      	nop			@ (mov r8, r8)
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2000021c 	.word	0x2000021c
 8004a70:	20000218 	.word	0x20000218
 8004a74:	200040a0 	.word	0x200040a0
 8004a78:	20000220 	.word	0x20000220
 8004a7c:	50000400 	.word	0x50000400
 8004a80:	200000cc 	.word	0x200000cc
 8004a84:	200040a4 	.word	0x200040a4

08004a88 <send_pic>:

void send_pic(uint8_t num){
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b089      	sub	sp, #36	@ 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	0002      	movs	r2, r0
 8004a90:	1dfb      	adds	r3, r7, #7
 8004a92:	701a      	strb	r2, [r3, #0]
	char send[20];
	HAL_UART_Transmit(&huart2,(uint8_t *)send,sprintf(send,"%02x",num),100);
 8004a94:	1dfb      	adds	r3, r7, #7
 8004a96:	781a      	ldrb	r2, [r3, #0]
 8004a98:	4908      	ldr	r1, [pc, #32]	@ (8004abc <send_pic+0x34>)
 8004a9a:	240c      	movs	r4, #12
 8004a9c:	193b      	adds	r3, r7, r4
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 f830 	bl	8004b04 <siprintf>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	1939      	adds	r1, r7, r4
 8004aaa:	4805      	ldr	r0, [pc, #20]	@ (8004ac0 <send_pic+0x38>)
 8004aac:	2364      	movs	r3, #100	@ 0x64
 8004aae:	f7fe ffbd 	bl	8003a2c <HAL_UART_Transmit>
}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b009      	add	sp, #36	@ 0x24
 8004ab8:	bd90      	pop	{r4, r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	08005458 	.word	0x08005458
 8004ac0:	2000017c 	.word	0x2000017c

08004ac4 <debug_spi_func>:
		//HAL_UART_Transmit(&huart2,(uint8_t *)status[1],strlen(status[1]),HAL_MAX_DELAY);
		return true;
	}
}

void debug_spi_func(uint8_t num){
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	0002      	movs	r2, r0
 8004acc:	1dfb      	adds	r3, r7, #7
 8004ace:	701a      	strb	r2, [r3, #0]
	char res[8];
	int len = sprintf(res,"%u",num);
 8004ad0:	1dfb      	adds	r3, r7, #7
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	4909      	ldr	r1, [pc, #36]	@ (8004afc <debug_spi_func+0x38>)
 8004ad6:	240c      	movs	r4, #12
 8004ad8:	193b      	adds	r3, r7, r4
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 f812 	bl	8004b04 <siprintf>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart2,(uint8_t *)res,len,1);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	1939      	adds	r1, r7, r4
 8004aea:	4805      	ldr	r0, [pc, #20]	@ (8004b00 <debug_spi_func+0x3c>)
 8004aec:	2301      	movs	r3, #1
 8004aee:	f7fe ff9d 	bl	8003a2c <HAL_UART_Transmit>
}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b007      	add	sp, #28
 8004af8:	bd90      	pop	{r4, r7, pc}
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	0800547c 	.word	0x0800547c
 8004b00:	2000017c 	.word	0x2000017c

08004b04 <siprintf>:
 8004b04:	b40e      	push	{r1, r2, r3}
 8004b06:	b500      	push	{lr}
 8004b08:	490b      	ldr	r1, [pc, #44]	@ (8004b38 <siprintf+0x34>)
 8004b0a:	b09c      	sub	sp, #112	@ 0x70
 8004b0c:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b0e:	9002      	str	r0, [sp, #8]
 8004b10:	9006      	str	r0, [sp, #24]
 8004b12:	9107      	str	r1, [sp, #28]
 8004b14:	9104      	str	r1, [sp, #16]
 8004b16:	4809      	ldr	r0, [pc, #36]	@ (8004b3c <siprintf+0x38>)
 8004b18:	4909      	ldr	r1, [pc, #36]	@ (8004b40 <siprintf+0x3c>)
 8004b1a:	cb04      	ldmia	r3!, {r2}
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	6800      	ldr	r0, [r0, #0]
 8004b20:	a902      	add	r1, sp, #8
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	f000 f99e 	bl	8004e64 <_svfiprintf_r>
 8004b28:	2200      	movs	r2, #0
 8004b2a:	9b02      	ldr	r3, [sp, #8]
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	b01c      	add	sp, #112	@ 0x70
 8004b30:	bc08      	pop	{r3}
 8004b32:	b003      	add	sp, #12
 8004b34:	4718      	bx	r3
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	7fffffff 	.word	0x7fffffff
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	ffff0208 	.word	0xffff0208

08004b44 <memset>:
 8004b44:	0003      	movs	r3, r0
 8004b46:	1882      	adds	r2, r0, r2
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d100      	bne.n	8004b4e <memset+0xa>
 8004b4c:	4770      	bx	lr
 8004b4e:	7019      	strb	r1, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	e7f9      	b.n	8004b48 <memset+0x4>

08004b54 <__errno>:
 8004b54:	4b01      	ldr	r3, [pc, #4]	@ (8004b5c <__errno+0x8>)
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	4770      	bx	lr
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	2000000c 	.word	0x2000000c

08004b60 <__libc_init_array>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	2600      	movs	r6, #0
 8004b64:	4c0c      	ldr	r4, [pc, #48]	@ (8004b98 <__libc_init_array+0x38>)
 8004b66:	4d0d      	ldr	r5, [pc, #52]	@ (8004b9c <__libc_init_array+0x3c>)
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	42a6      	cmp	r6, r4
 8004b6e:	d109      	bne.n	8004b84 <__libc_init_array+0x24>
 8004b70:	2600      	movs	r6, #0
 8004b72:	f000 fc65 	bl	8005440 <_init>
 8004b76:	4c0a      	ldr	r4, [pc, #40]	@ (8004ba0 <__libc_init_array+0x40>)
 8004b78:	4d0a      	ldr	r5, [pc, #40]	@ (8004ba4 <__libc_init_array+0x44>)
 8004b7a:	1b64      	subs	r4, r4, r5
 8004b7c:	10a4      	asrs	r4, r4, #2
 8004b7e:	42a6      	cmp	r6, r4
 8004b80:	d105      	bne.n	8004b8e <__libc_init_array+0x2e>
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	00b3      	lsls	r3, r6, #2
 8004b86:	58eb      	ldr	r3, [r5, r3]
 8004b88:	4798      	blx	r3
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7ee      	b.n	8004b6c <__libc_init_array+0xc>
 8004b8e:	00b3      	lsls	r3, r6, #2
 8004b90:	58eb      	ldr	r3, [r5, r3]
 8004b92:	4798      	blx	r3
 8004b94:	3601      	adds	r6, #1
 8004b96:	e7f2      	b.n	8004b7e <__libc_init_array+0x1e>
 8004b98:	08005930 	.word	0x08005930
 8004b9c:	08005930 	.word	0x08005930
 8004ba0:	08005934 	.word	0x08005934
 8004ba4:	08005930 	.word	0x08005930

08004ba8 <__retarget_lock_acquire_recursive>:
 8004ba8:	4770      	bx	lr

08004baa <__retarget_lock_release_recursive>:
 8004baa:	4770      	bx	lr

08004bac <_free_r>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	0005      	movs	r5, r0
 8004bb0:	1e0c      	subs	r4, r1, #0
 8004bb2:	d010      	beq.n	8004bd6 <_free_r+0x2a>
 8004bb4:	3c04      	subs	r4, #4
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	da00      	bge.n	8004bbe <_free_r+0x12>
 8004bbc:	18e4      	adds	r4, r4, r3
 8004bbe:	0028      	movs	r0, r5
 8004bc0:	f000 f8e0 	bl	8004d84 <__malloc_lock>
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <_free_r+0x90>)
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <_free_r+0x2c>
 8004bcc:	6063      	str	r3, [r4, #4]
 8004bce:	6014      	str	r4, [r2, #0]
 8004bd0:	0028      	movs	r0, r5
 8004bd2:	f000 f8df 	bl	8004d94 <__malloc_unlock>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d908      	bls.n	8004bee <_free_r+0x42>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	1821      	adds	r1, r4, r0
 8004be0:	428b      	cmp	r3, r1
 8004be2:	d1f3      	bne.n	8004bcc <_free_r+0x20>
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	1809      	adds	r1, r1, r0
 8004bea:	6021      	str	r1, [r4, #0]
 8004bec:	e7ee      	b.n	8004bcc <_free_r+0x20>
 8004bee:	001a      	movs	r2, r3
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <_free_r+0x4e>
 8004bf6:	42a3      	cmp	r3, r4
 8004bf8:	d9f9      	bls.n	8004bee <_free_r+0x42>
 8004bfa:	6811      	ldr	r1, [r2, #0]
 8004bfc:	1850      	adds	r0, r2, r1
 8004bfe:	42a0      	cmp	r0, r4
 8004c00:	d10b      	bne.n	8004c1a <_free_r+0x6e>
 8004c02:	6820      	ldr	r0, [r4, #0]
 8004c04:	1809      	adds	r1, r1, r0
 8004c06:	1850      	adds	r0, r2, r1
 8004c08:	6011      	str	r1, [r2, #0]
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	d1e0      	bne.n	8004bd0 <_free_r+0x24>
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	1841      	adds	r1, r0, r1
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	6053      	str	r3, [r2, #4]
 8004c18:	e7da      	b.n	8004bd0 <_free_r+0x24>
 8004c1a:	42a0      	cmp	r0, r4
 8004c1c:	d902      	bls.n	8004c24 <_free_r+0x78>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	e7d5      	b.n	8004bd0 <_free_r+0x24>
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	1821      	adds	r1, r4, r0
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d103      	bne.n	8004c34 <_free_r+0x88>
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	1809      	adds	r1, r1, r0
 8004c32:	6021      	str	r1, [r4, #0]
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	6054      	str	r4, [r2, #4]
 8004c38:	e7ca      	b.n	8004bd0 <_free_r+0x24>
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	200041f0 	.word	0x200041f0

08004c40 <sbrk_aligned>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4e0f      	ldr	r6, [pc, #60]	@ (8004c80 <sbrk_aligned+0x40>)
 8004c44:	000d      	movs	r5, r1
 8004c46:	6831      	ldr	r1, [r6, #0]
 8004c48:	0004      	movs	r4, r0
 8004c4a:	2900      	cmp	r1, #0
 8004c4c:	d102      	bne.n	8004c54 <sbrk_aligned+0x14>
 8004c4e:	f000 fb99 	bl	8005384 <_sbrk_r>
 8004c52:	6030      	str	r0, [r6, #0]
 8004c54:	0029      	movs	r1, r5
 8004c56:	0020      	movs	r0, r4
 8004c58:	f000 fb94 	bl	8005384 <_sbrk_r>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d103      	bne.n	8004c68 <sbrk_aligned+0x28>
 8004c60:	2501      	movs	r5, #1
 8004c62:	426d      	negs	r5, r5
 8004c64:	0028      	movs	r0, r5
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	2303      	movs	r3, #3
 8004c6a:	1cc5      	adds	r5, r0, #3
 8004c6c:	439d      	bics	r5, r3
 8004c6e:	42a8      	cmp	r0, r5
 8004c70:	d0f8      	beq.n	8004c64 <sbrk_aligned+0x24>
 8004c72:	1a29      	subs	r1, r5, r0
 8004c74:	0020      	movs	r0, r4
 8004c76:	f000 fb85 	bl	8005384 <_sbrk_r>
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d1f2      	bne.n	8004c64 <sbrk_aligned+0x24>
 8004c7e:	e7ef      	b.n	8004c60 <sbrk_aligned+0x20>
 8004c80:	200041ec 	.word	0x200041ec

08004c84 <_malloc_r>:
 8004c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c86:	2203      	movs	r2, #3
 8004c88:	1ccb      	adds	r3, r1, #3
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	0005      	movs	r5, r0
 8004c90:	001f      	movs	r7, r3
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d234      	bcs.n	8004d00 <_malloc_r+0x7c>
 8004c96:	270c      	movs	r7, #12
 8004c98:	42b9      	cmp	r1, r7
 8004c9a:	d833      	bhi.n	8004d04 <_malloc_r+0x80>
 8004c9c:	0028      	movs	r0, r5
 8004c9e:	f000 f871 	bl	8004d84 <__malloc_lock>
 8004ca2:	4e37      	ldr	r6, [pc, #220]	@ (8004d80 <_malloc_r+0xfc>)
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	001c      	movs	r4, r3
 8004ca8:	2c00      	cmp	r4, #0
 8004caa:	d12f      	bne.n	8004d0c <_malloc_r+0x88>
 8004cac:	0039      	movs	r1, r7
 8004cae:	0028      	movs	r0, r5
 8004cb0:	f7ff ffc6 	bl	8004c40 <sbrk_aligned>
 8004cb4:	0004      	movs	r4, r0
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d15f      	bne.n	8004d7a <_malloc_r+0xf6>
 8004cba:	6834      	ldr	r4, [r6, #0]
 8004cbc:	9400      	str	r4, [sp, #0]
 8004cbe:	9b00      	ldr	r3, [sp, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d14a      	bne.n	8004d5a <_malloc_r+0xd6>
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d052      	beq.n	8004d6e <_malloc_r+0xea>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	0028      	movs	r0, r5
 8004ccc:	18e3      	adds	r3, r4, r3
 8004cce:	9900      	ldr	r1, [sp, #0]
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	f000 fb57 	bl	8005384 <_sbrk_r>
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	4283      	cmp	r3, r0
 8004cda:	d148      	bne.n	8004d6e <_malloc_r+0xea>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	0028      	movs	r0, r5
 8004ce0:	1aff      	subs	r7, r7, r3
 8004ce2:	0039      	movs	r1, r7
 8004ce4:	f7ff ffac 	bl	8004c40 <sbrk_aligned>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d040      	beq.n	8004d6e <_malloc_r+0xea>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	19db      	adds	r3, r3, r7
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	6833      	ldr	r3, [r6, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d133      	bne.n	8004d62 <_malloc_r+0xde>
 8004cfa:	9b00      	ldr	r3, [sp, #0]
 8004cfc:	6033      	str	r3, [r6, #0]
 8004cfe:	e019      	b.n	8004d34 <_malloc_r+0xb0>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dac9      	bge.n	8004c98 <_malloc_r+0x14>
 8004d04:	230c      	movs	r3, #12
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	2000      	movs	r0, #0
 8004d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	1bc9      	subs	r1, r1, r7
 8004d10:	d420      	bmi.n	8004d54 <_malloc_r+0xd0>
 8004d12:	290b      	cmp	r1, #11
 8004d14:	d90a      	bls.n	8004d2c <_malloc_r+0xa8>
 8004d16:	19e2      	adds	r2, r4, r7
 8004d18:	6027      	str	r7, [r4, #0]
 8004d1a:	42a3      	cmp	r3, r4
 8004d1c:	d104      	bne.n	8004d28 <_malloc_r+0xa4>
 8004d1e:	6032      	str	r2, [r6, #0]
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	6011      	str	r1, [r2, #0]
 8004d24:	6053      	str	r3, [r2, #4]
 8004d26:	e005      	b.n	8004d34 <_malloc_r+0xb0>
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e7f9      	b.n	8004d20 <_malloc_r+0x9c>
 8004d2c:	6862      	ldr	r2, [r4, #4]
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	d10e      	bne.n	8004d50 <_malloc_r+0xcc>
 8004d32:	6032      	str	r2, [r6, #0]
 8004d34:	0028      	movs	r0, r5
 8004d36:	f000 f82d 	bl	8004d94 <__malloc_unlock>
 8004d3a:	0020      	movs	r0, r4
 8004d3c:	2207      	movs	r2, #7
 8004d3e:	300b      	adds	r0, #11
 8004d40:	1d23      	adds	r3, r4, #4
 8004d42:	4390      	bics	r0, r2
 8004d44:	1ac2      	subs	r2, r0, r3
 8004d46:	4298      	cmp	r0, r3
 8004d48:	d0df      	beq.n	8004d0a <_malloc_r+0x86>
 8004d4a:	1a1b      	subs	r3, r3, r0
 8004d4c:	50a3      	str	r3, [r4, r2]
 8004d4e:	e7dc      	b.n	8004d0a <_malloc_r+0x86>
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	e7ef      	b.n	8004d34 <_malloc_r+0xb0>
 8004d54:	0023      	movs	r3, r4
 8004d56:	6864      	ldr	r4, [r4, #4]
 8004d58:	e7a6      	b.n	8004ca8 <_malloc_r+0x24>
 8004d5a:	9c00      	ldr	r4, [sp, #0]
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	e7ad      	b.n	8004cbe <_malloc_r+0x3a>
 8004d62:	001a      	movs	r2, r3
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	d1fb      	bne.n	8004d62 <_malloc_r+0xde>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e7da      	b.n	8004d24 <_malloc_r+0xa0>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	0028      	movs	r0, r5
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f000 f80e 	bl	8004d94 <__malloc_unlock>
 8004d78:	e7c6      	b.n	8004d08 <_malloc_r+0x84>
 8004d7a:	6007      	str	r7, [r0, #0]
 8004d7c:	e7da      	b.n	8004d34 <_malloc_r+0xb0>
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	200041f0 	.word	0x200041f0

08004d84 <__malloc_lock>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4802      	ldr	r0, [pc, #8]	@ (8004d90 <__malloc_lock+0xc>)
 8004d88:	f7ff ff0e 	bl	8004ba8 <__retarget_lock_acquire_recursive>
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	200041e8 	.word	0x200041e8

08004d94 <__malloc_unlock>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4802      	ldr	r0, [pc, #8]	@ (8004da0 <__malloc_unlock+0xc>)
 8004d98:	f7ff ff07 	bl	8004baa <__retarget_lock_release_recursive>
 8004d9c:	bd10      	pop	{r4, pc}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	200041e8 	.word	0x200041e8

08004da4 <__ssputs_r>:
 8004da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da6:	688e      	ldr	r6, [r1, #8]
 8004da8:	b085      	sub	sp, #20
 8004daa:	001f      	movs	r7, r3
 8004dac:	000c      	movs	r4, r1
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	9002      	str	r0, [sp, #8]
 8004db2:	9203      	str	r2, [sp, #12]
 8004db4:	42be      	cmp	r6, r7
 8004db6:	d830      	bhi.n	8004e1a <__ssputs_r+0x76>
 8004db8:	210c      	movs	r1, #12
 8004dba:	5e62      	ldrsh	r2, [r4, r1]
 8004dbc:	2190      	movs	r1, #144	@ 0x90
 8004dbe:	00c9      	lsls	r1, r1, #3
 8004dc0:	420a      	tst	r2, r1
 8004dc2:	d028      	beq.n	8004e16 <__ssputs_r+0x72>
 8004dc4:	2003      	movs	r0, #3
 8004dc6:	6921      	ldr	r1, [r4, #16]
 8004dc8:	1a5b      	subs	r3, r3, r1
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	6963      	ldr	r3, [r4, #20]
 8004dce:	4343      	muls	r3, r0
 8004dd0:	9801      	ldr	r0, [sp, #4]
 8004dd2:	0fdd      	lsrs	r5, r3, #31
 8004dd4:	18ed      	adds	r5, r5, r3
 8004dd6:	1c7b      	adds	r3, r7, #1
 8004dd8:	181b      	adds	r3, r3, r0
 8004dda:	106d      	asrs	r5, r5, #1
 8004ddc:	42ab      	cmp	r3, r5
 8004dde:	d900      	bls.n	8004de2 <__ssputs_r+0x3e>
 8004de0:	001d      	movs	r5, r3
 8004de2:	0552      	lsls	r2, r2, #21
 8004de4:	d528      	bpl.n	8004e38 <__ssputs_r+0x94>
 8004de6:	0029      	movs	r1, r5
 8004de8:	9802      	ldr	r0, [sp, #8]
 8004dea:	f7ff ff4b 	bl	8004c84 <_malloc_r>
 8004dee:	1e06      	subs	r6, r0, #0
 8004df0:	d02c      	beq.n	8004e4c <__ssputs_r+0xa8>
 8004df2:	9a01      	ldr	r2, [sp, #4]
 8004df4:	6921      	ldr	r1, [r4, #16]
 8004df6:	f000 fae2 	bl	80053be <memcpy>
 8004dfa:	89a2      	ldrh	r2, [r4, #12]
 8004dfc:	4b18      	ldr	r3, [pc, #96]	@ (8004e60 <__ssputs_r+0xbc>)
 8004dfe:	401a      	ands	r2, r3
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	4313      	orrs	r3, r2
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	9b01      	ldr	r3, [sp, #4]
 8004e08:	6126      	str	r6, [r4, #16]
 8004e0a:	18f6      	adds	r6, r6, r3
 8004e0c:	6026      	str	r6, [r4, #0]
 8004e0e:	003e      	movs	r6, r7
 8004e10:	6165      	str	r5, [r4, #20]
 8004e12:	1aed      	subs	r5, r5, r3
 8004e14:	60a5      	str	r5, [r4, #8]
 8004e16:	42be      	cmp	r6, r7
 8004e18:	d900      	bls.n	8004e1c <__ssputs_r+0x78>
 8004e1a:	003e      	movs	r6, r7
 8004e1c:	0032      	movs	r2, r6
 8004e1e:	9903      	ldr	r1, [sp, #12]
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	f000 fa9b 	bl	800535c <memmove>
 8004e26:	2000      	movs	r0, #0
 8004e28:	68a3      	ldr	r3, [r4, #8]
 8004e2a:	1b9b      	subs	r3, r3, r6
 8004e2c:	60a3      	str	r3, [r4, #8]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	199b      	adds	r3, r3, r6
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	b005      	add	sp, #20
 8004e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e38:	002a      	movs	r2, r5
 8004e3a:	9802      	ldr	r0, [sp, #8]
 8004e3c:	f000 fac8 	bl	80053d0 <_realloc_r>
 8004e40:	1e06      	subs	r6, r0, #0
 8004e42:	d1e0      	bne.n	8004e06 <__ssputs_r+0x62>
 8004e44:	6921      	ldr	r1, [r4, #16]
 8004e46:	9802      	ldr	r0, [sp, #8]
 8004e48:	f7ff feb0 	bl	8004bac <_free_r>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	2001      	movs	r0, #1
 8004e50:	9a02      	ldr	r2, [sp, #8]
 8004e52:	4240      	negs	r0, r0
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	89a2      	ldrh	r2, [r4, #12]
 8004e58:	3334      	adds	r3, #52	@ 0x34
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	e7e9      	b.n	8004e34 <__ssputs_r+0x90>
 8004e60:	fffffb7f 	.word	0xfffffb7f

08004e64 <_svfiprintf_r>:
 8004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e66:	b0a1      	sub	sp, #132	@ 0x84
 8004e68:	9003      	str	r0, [sp, #12]
 8004e6a:	001d      	movs	r5, r3
 8004e6c:	898b      	ldrh	r3, [r1, #12]
 8004e6e:	000f      	movs	r7, r1
 8004e70:	0016      	movs	r6, r2
 8004e72:	061b      	lsls	r3, r3, #24
 8004e74:	d511      	bpl.n	8004e9a <_svfiprintf_r+0x36>
 8004e76:	690b      	ldr	r3, [r1, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10e      	bne.n	8004e9a <_svfiprintf_r+0x36>
 8004e7c:	2140      	movs	r1, #64	@ 0x40
 8004e7e:	f7ff ff01 	bl	8004c84 <_malloc_r>
 8004e82:	6038      	str	r0, [r7, #0]
 8004e84:	6138      	str	r0, [r7, #16]
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d105      	bne.n	8004e96 <_svfiprintf_r+0x32>
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	9a03      	ldr	r2, [sp, #12]
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	2001      	movs	r0, #1
 8004e92:	4240      	negs	r0, r0
 8004e94:	e0cf      	b.n	8005036 <_svfiprintf_r+0x1d2>
 8004e96:	2340      	movs	r3, #64	@ 0x40
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	ac08      	add	r4, sp, #32
 8004e9e:	6163      	str	r3, [r4, #20]
 8004ea0:	3320      	adds	r3, #32
 8004ea2:	7663      	strb	r3, [r4, #25]
 8004ea4:	3310      	adds	r3, #16
 8004ea6:	76a3      	strb	r3, [r4, #26]
 8004ea8:	9507      	str	r5, [sp, #28]
 8004eaa:	0035      	movs	r5, r6
 8004eac:	782b      	ldrb	r3, [r5, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <_svfiprintf_r+0x52>
 8004eb2:	2b25      	cmp	r3, #37	@ 0x25
 8004eb4:	d148      	bne.n	8004f48 <_svfiprintf_r+0xe4>
 8004eb6:	1bab      	subs	r3, r5, r6
 8004eb8:	9305      	str	r3, [sp, #20]
 8004eba:	42b5      	cmp	r5, r6
 8004ebc:	d00b      	beq.n	8004ed6 <_svfiprintf_r+0x72>
 8004ebe:	0032      	movs	r2, r6
 8004ec0:	0039      	movs	r1, r7
 8004ec2:	9803      	ldr	r0, [sp, #12]
 8004ec4:	f7ff ff6e 	bl	8004da4 <__ssputs_r>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d100      	bne.n	8004ece <_svfiprintf_r+0x6a>
 8004ecc:	e0ae      	b.n	800502c <_svfiprintf_r+0x1c8>
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	9a05      	ldr	r2, [sp, #20]
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	6163      	str	r3, [r4, #20]
 8004ed6:	782b      	ldrb	r3, [r5, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d100      	bne.n	8004ede <_svfiprintf_r+0x7a>
 8004edc:	e0a6      	b.n	800502c <_svfiprintf_r+0x1c8>
 8004ede:	2201      	movs	r2, #1
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4252      	negs	r2, r2
 8004ee4:	6062      	str	r2, [r4, #4]
 8004ee6:	a904      	add	r1, sp, #16
 8004ee8:	3254      	adds	r2, #84	@ 0x54
 8004eea:	1852      	adds	r2, r2, r1
 8004eec:	1c6e      	adds	r6, r5, #1
 8004eee:	6023      	str	r3, [r4, #0]
 8004ef0:	60e3      	str	r3, [r4, #12]
 8004ef2:	60a3      	str	r3, [r4, #8]
 8004ef4:	7013      	strb	r3, [r2, #0]
 8004ef6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004ef8:	4b54      	ldr	r3, [pc, #336]	@ (800504c <_svfiprintf_r+0x1e8>)
 8004efa:	2205      	movs	r2, #5
 8004efc:	0018      	movs	r0, r3
 8004efe:	7831      	ldrb	r1, [r6, #0]
 8004f00:	9305      	str	r3, [sp, #20]
 8004f02:	f000 fa51 	bl	80053a8 <memchr>
 8004f06:	1c75      	adds	r5, r6, #1
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d11f      	bne.n	8004f4c <_svfiprintf_r+0xe8>
 8004f0c:	6822      	ldr	r2, [r4, #0]
 8004f0e:	06d3      	lsls	r3, r2, #27
 8004f10:	d504      	bpl.n	8004f1c <_svfiprintf_r+0xb8>
 8004f12:	2353      	movs	r3, #83	@ 0x53
 8004f14:	a904      	add	r1, sp, #16
 8004f16:	185b      	adds	r3, r3, r1
 8004f18:	2120      	movs	r1, #32
 8004f1a:	7019      	strb	r1, [r3, #0]
 8004f1c:	0713      	lsls	r3, r2, #28
 8004f1e:	d504      	bpl.n	8004f2a <_svfiprintf_r+0xc6>
 8004f20:	2353      	movs	r3, #83	@ 0x53
 8004f22:	a904      	add	r1, sp, #16
 8004f24:	185b      	adds	r3, r3, r1
 8004f26:	212b      	movs	r1, #43	@ 0x2b
 8004f28:	7019      	strb	r1, [r3, #0]
 8004f2a:	7833      	ldrb	r3, [r6, #0]
 8004f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f2e:	d016      	beq.n	8004f5e <_svfiprintf_r+0xfa>
 8004f30:	0035      	movs	r5, r6
 8004f32:	2100      	movs	r1, #0
 8004f34:	200a      	movs	r0, #10
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	782a      	ldrb	r2, [r5, #0]
 8004f3a:	1c6e      	adds	r6, r5, #1
 8004f3c:	3a30      	subs	r2, #48	@ 0x30
 8004f3e:	2a09      	cmp	r2, #9
 8004f40:	d950      	bls.n	8004fe4 <_svfiprintf_r+0x180>
 8004f42:	2900      	cmp	r1, #0
 8004f44:	d111      	bne.n	8004f6a <_svfiprintf_r+0x106>
 8004f46:	e017      	b.n	8004f78 <_svfiprintf_r+0x114>
 8004f48:	3501      	adds	r5, #1
 8004f4a:	e7af      	b.n	8004eac <_svfiprintf_r+0x48>
 8004f4c:	9b05      	ldr	r3, [sp, #20]
 8004f4e:	6822      	ldr	r2, [r4, #0]
 8004f50:	1ac0      	subs	r0, r0, r3
 8004f52:	2301      	movs	r3, #1
 8004f54:	4083      	lsls	r3, r0
 8004f56:	4313      	orrs	r3, r2
 8004f58:	002e      	movs	r6, r5
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	e7cc      	b.n	8004ef8 <_svfiprintf_r+0x94>
 8004f5e:	9b07      	ldr	r3, [sp, #28]
 8004f60:	1d19      	adds	r1, r3, #4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	9107      	str	r1, [sp, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	db01      	blt.n	8004f6e <_svfiprintf_r+0x10a>
 8004f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f6c:	e004      	b.n	8004f78 <_svfiprintf_r+0x114>
 8004f6e:	425b      	negs	r3, r3
 8004f70:	60e3      	str	r3, [r4, #12]
 8004f72:	2302      	movs	r3, #2
 8004f74:	4313      	orrs	r3, r2
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	782b      	ldrb	r3, [r5, #0]
 8004f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f7c:	d10c      	bne.n	8004f98 <_svfiprintf_r+0x134>
 8004f7e:	786b      	ldrb	r3, [r5, #1]
 8004f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f82:	d134      	bne.n	8004fee <_svfiprintf_r+0x18a>
 8004f84:	9b07      	ldr	r3, [sp, #28]
 8004f86:	3502      	adds	r5, #2
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	9207      	str	r2, [sp, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da01      	bge.n	8004f96 <_svfiprintf_r+0x132>
 8004f92:	2301      	movs	r3, #1
 8004f94:	425b      	negs	r3, r3
 8004f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f98:	4e2d      	ldr	r6, [pc, #180]	@ (8005050 <_svfiprintf_r+0x1ec>)
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	0030      	movs	r0, r6
 8004f9e:	7829      	ldrb	r1, [r5, #0]
 8004fa0:	f000 fa02 	bl	80053a8 <memchr>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d006      	beq.n	8004fb6 <_svfiprintf_r+0x152>
 8004fa8:	2340      	movs	r3, #64	@ 0x40
 8004faa:	1b80      	subs	r0, r0, r6
 8004fac:	4083      	lsls	r3, r0
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	3501      	adds	r5, #1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	7829      	ldrb	r1, [r5, #0]
 8004fb8:	2206      	movs	r2, #6
 8004fba:	4826      	ldr	r0, [pc, #152]	@ (8005054 <_svfiprintf_r+0x1f0>)
 8004fbc:	1c6e      	adds	r6, r5, #1
 8004fbe:	7621      	strb	r1, [r4, #24]
 8004fc0:	f000 f9f2 	bl	80053a8 <memchr>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d038      	beq.n	800503a <_svfiprintf_r+0x1d6>
 8004fc8:	4b23      	ldr	r3, [pc, #140]	@ (8005058 <_svfiprintf_r+0x1f4>)
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d122      	bne.n	8005014 <_svfiprintf_r+0x1b0>
 8004fce:	2207      	movs	r2, #7
 8004fd0:	9b07      	ldr	r3, [sp, #28]
 8004fd2:	3307      	adds	r3, #7
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	9307      	str	r3, [sp, #28]
 8004fda:	6963      	ldr	r3, [r4, #20]
 8004fdc:	9a04      	ldr	r2, [sp, #16]
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	6163      	str	r3, [r4, #20]
 8004fe2:	e762      	b.n	8004eaa <_svfiprintf_r+0x46>
 8004fe4:	4343      	muls	r3, r0
 8004fe6:	0035      	movs	r5, r6
 8004fe8:	2101      	movs	r1, #1
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	e7a4      	b.n	8004f38 <_svfiprintf_r+0xd4>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	200a      	movs	r0, #10
 8004ff2:	0019      	movs	r1, r3
 8004ff4:	3501      	adds	r5, #1
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	782a      	ldrb	r2, [r5, #0]
 8004ffa:	1c6e      	adds	r6, r5, #1
 8004ffc:	3a30      	subs	r2, #48	@ 0x30
 8004ffe:	2a09      	cmp	r2, #9
 8005000:	d903      	bls.n	800500a <_svfiprintf_r+0x1a6>
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0c8      	beq.n	8004f98 <_svfiprintf_r+0x134>
 8005006:	9109      	str	r1, [sp, #36]	@ 0x24
 8005008:	e7c6      	b.n	8004f98 <_svfiprintf_r+0x134>
 800500a:	4341      	muls	r1, r0
 800500c:	0035      	movs	r5, r6
 800500e:	2301      	movs	r3, #1
 8005010:	1889      	adds	r1, r1, r2
 8005012:	e7f1      	b.n	8004ff8 <_svfiprintf_r+0x194>
 8005014:	aa07      	add	r2, sp, #28
 8005016:	9200      	str	r2, [sp, #0]
 8005018:	0021      	movs	r1, r4
 800501a:	003a      	movs	r2, r7
 800501c:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <_svfiprintf_r+0x1f8>)
 800501e:	9803      	ldr	r0, [sp, #12]
 8005020:	e000      	b.n	8005024 <_svfiprintf_r+0x1c0>
 8005022:	bf00      	nop
 8005024:	9004      	str	r0, [sp, #16]
 8005026:	9b04      	ldr	r3, [sp, #16]
 8005028:	3301      	adds	r3, #1
 800502a:	d1d6      	bne.n	8004fda <_svfiprintf_r+0x176>
 800502c:	89bb      	ldrh	r3, [r7, #12]
 800502e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005030:	065b      	lsls	r3, r3, #25
 8005032:	d500      	bpl.n	8005036 <_svfiprintf_r+0x1d2>
 8005034:	e72c      	b.n	8004e90 <_svfiprintf_r+0x2c>
 8005036:	b021      	add	sp, #132	@ 0x84
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503a:	aa07      	add	r2, sp, #28
 800503c:	9200      	str	r2, [sp, #0]
 800503e:	0021      	movs	r1, r4
 8005040:	003a      	movs	r2, r7
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <_svfiprintf_r+0x1f8>)
 8005044:	9803      	ldr	r0, [sp, #12]
 8005046:	f000 f87b 	bl	8005140 <_printf_i>
 800504a:	e7eb      	b.n	8005024 <_svfiprintf_r+0x1c0>
 800504c:	080058fc 	.word	0x080058fc
 8005050:	08005902 	.word	0x08005902
 8005054:	08005906 	.word	0x08005906
 8005058:	00000000 	.word	0x00000000
 800505c:	08004da5 	.word	0x08004da5

08005060 <_printf_common>:
 8005060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005062:	0016      	movs	r6, r2
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	688a      	ldr	r2, [r1, #8]
 8005068:	690b      	ldr	r3, [r1, #16]
 800506a:	000c      	movs	r4, r1
 800506c:	9000      	str	r0, [sp, #0]
 800506e:	4293      	cmp	r3, r2
 8005070:	da00      	bge.n	8005074 <_printf_common+0x14>
 8005072:	0013      	movs	r3, r2
 8005074:	0022      	movs	r2, r4
 8005076:	6033      	str	r3, [r6, #0]
 8005078:	3243      	adds	r2, #67	@ 0x43
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	2a00      	cmp	r2, #0
 800507e:	d001      	beq.n	8005084 <_printf_common+0x24>
 8005080:	3301      	adds	r3, #1
 8005082:	6033      	str	r3, [r6, #0]
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	069b      	lsls	r3, r3, #26
 8005088:	d502      	bpl.n	8005090 <_printf_common+0x30>
 800508a:	6833      	ldr	r3, [r6, #0]
 800508c:	3302      	adds	r3, #2
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	2306      	movs	r3, #6
 8005094:	0015      	movs	r5, r2
 8005096:	401d      	ands	r5, r3
 8005098:	421a      	tst	r2, r3
 800509a:	d027      	beq.n	80050ec <_printf_common+0x8c>
 800509c:	0023      	movs	r3, r4
 800509e:	3343      	adds	r3, #67	@ 0x43
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	4193      	sbcs	r3, r2
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	0692      	lsls	r2, r2, #26
 80050aa:	d430      	bmi.n	800510e <_printf_common+0xae>
 80050ac:	0022      	movs	r2, r4
 80050ae:	9901      	ldr	r1, [sp, #4]
 80050b0:	9800      	ldr	r0, [sp, #0]
 80050b2:	9d08      	ldr	r5, [sp, #32]
 80050b4:	3243      	adds	r2, #67	@ 0x43
 80050b6:	47a8      	blx	r5
 80050b8:	3001      	adds	r0, #1
 80050ba:	d025      	beq.n	8005108 <_printf_common+0xa8>
 80050bc:	2206      	movs	r2, #6
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	2500      	movs	r5, #0
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d105      	bne.n	80050d4 <_printf_common+0x74>
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	68e5      	ldr	r5, [r4, #12]
 80050cc:	1aed      	subs	r5, r5, r3
 80050ce:	43eb      	mvns	r3, r5
 80050d0:	17db      	asrs	r3, r3, #31
 80050d2:	401d      	ands	r5, r3
 80050d4:	68a3      	ldr	r3, [r4, #8]
 80050d6:	6922      	ldr	r2, [r4, #16]
 80050d8:	4293      	cmp	r3, r2
 80050da:	dd01      	ble.n	80050e0 <_printf_common+0x80>
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	18ed      	adds	r5, r5, r3
 80050e0:	2600      	movs	r6, #0
 80050e2:	42b5      	cmp	r5, r6
 80050e4:	d120      	bne.n	8005128 <_printf_common+0xc8>
 80050e6:	2000      	movs	r0, #0
 80050e8:	e010      	b.n	800510c <_printf_common+0xac>
 80050ea:	3501      	adds	r5, #1
 80050ec:	68e3      	ldr	r3, [r4, #12]
 80050ee:	6832      	ldr	r2, [r6, #0]
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	42ab      	cmp	r3, r5
 80050f4:	ddd2      	ble.n	800509c <_printf_common+0x3c>
 80050f6:	0022      	movs	r2, r4
 80050f8:	2301      	movs	r3, #1
 80050fa:	9901      	ldr	r1, [sp, #4]
 80050fc:	9800      	ldr	r0, [sp, #0]
 80050fe:	9f08      	ldr	r7, [sp, #32]
 8005100:	3219      	adds	r2, #25
 8005102:	47b8      	blx	r7
 8005104:	3001      	adds	r0, #1
 8005106:	d1f0      	bne.n	80050ea <_printf_common+0x8a>
 8005108:	2001      	movs	r0, #1
 800510a:	4240      	negs	r0, r0
 800510c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800510e:	2030      	movs	r0, #48	@ 0x30
 8005110:	18e1      	adds	r1, r4, r3
 8005112:	3143      	adds	r1, #67	@ 0x43
 8005114:	7008      	strb	r0, [r1, #0]
 8005116:	0021      	movs	r1, r4
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	3145      	adds	r1, #69	@ 0x45
 800511c:	7809      	ldrb	r1, [r1, #0]
 800511e:	18a2      	adds	r2, r4, r2
 8005120:	3243      	adds	r2, #67	@ 0x43
 8005122:	3302      	adds	r3, #2
 8005124:	7011      	strb	r1, [r2, #0]
 8005126:	e7c1      	b.n	80050ac <_printf_common+0x4c>
 8005128:	0022      	movs	r2, r4
 800512a:	2301      	movs	r3, #1
 800512c:	9901      	ldr	r1, [sp, #4]
 800512e:	9800      	ldr	r0, [sp, #0]
 8005130:	9f08      	ldr	r7, [sp, #32]
 8005132:	321a      	adds	r2, #26
 8005134:	47b8      	blx	r7
 8005136:	3001      	adds	r0, #1
 8005138:	d0e6      	beq.n	8005108 <_printf_common+0xa8>
 800513a:	3601      	adds	r6, #1
 800513c:	e7d1      	b.n	80050e2 <_printf_common+0x82>
	...

08005140 <_printf_i>:
 8005140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005142:	b08b      	sub	sp, #44	@ 0x2c
 8005144:	9206      	str	r2, [sp, #24]
 8005146:	000a      	movs	r2, r1
 8005148:	3243      	adds	r2, #67	@ 0x43
 800514a:	9307      	str	r3, [sp, #28]
 800514c:	9005      	str	r0, [sp, #20]
 800514e:	9203      	str	r2, [sp, #12]
 8005150:	7e0a      	ldrb	r2, [r1, #24]
 8005152:	000c      	movs	r4, r1
 8005154:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005156:	2a78      	cmp	r2, #120	@ 0x78
 8005158:	d809      	bhi.n	800516e <_printf_i+0x2e>
 800515a:	2a62      	cmp	r2, #98	@ 0x62
 800515c:	d80b      	bhi.n	8005176 <_printf_i+0x36>
 800515e:	2a00      	cmp	r2, #0
 8005160:	d100      	bne.n	8005164 <_printf_i+0x24>
 8005162:	e0bc      	b.n	80052de <_printf_i+0x19e>
 8005164:	497b      	ldr	r1, [pc, #492]	@ (8005354 <_printf_i+0x214>)
 8005166:	9104      	str	r1, [sp, #16]
 8005168:	2a58      	cmp	r2, #88	@ 0x58
 800516a:	d100      	bne.n	800516e <_printf_i+0x2e>
 800516c:	e090      	b.n	8005290 <_printf_i+0x150>
 800516e:	0025      	movs	r5, r4
 8005170:	3542      	adds	r5, #66	@ 0x42
 8005172:	702a      	strb	r2, [r5, #0]
 8005174:	e022      	b.n	80051bc <_printf_i+0x7c>
 8005176:	0010      	movs	r0, r2
 8005178:	3863      	subs	r0, #99	@ 0x63
 800517a:	2815      	cmp	r0, #21
 800517c:	d8f7      	bhi.n	800516e <_printf_i+0x2e>
 800517e:	f7fa ffbf 	bl	8000100 <__gnu_thumb1_case_shi>
 8005182:	0016      	.short	0x0016
 8005184:	fff6001f 	.word	0xfff6001f
 8005188:	fff6fff6 	.word	0xfff6fff6
 800518c:	001ffff6 	.word	0x001ffff6
 8005190:	fff6fff6 	.word	0xfff6fff6
 8005194:	fff6fff6 	.word	0xfff6fff6
 8005198:	003600a1 	.word	0x003600a1
 800519c:	fff60080 	.word	0xfff60080
 80051a0:	00b2fff6 	.word	0x00b2fff6
 80051a4:	0036fff6 	.word	0x0036fff6
 80051a8:	fff6fff6 	.word	0xfff6fff6
 80051ac:	0084      	.short	0x0084
 80051ae:	0025      	movs	r5, r4
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	3542      	adds	r5, #66	@ 0x42
 80051b4:	1d11      	adds	r1, r2, #4
 80051b6:	6019      	str	r1, [r3, #0]
 80051b8:	6813      	ldr	r3, [r2, #0]
 80051ba:	702b      	strb	r3, [r5, #0]
 80051bc:	2301      	movs	r3, #1
 80051be:	e0a0      	b.n	8005302 <_printf_i+0x1c2>
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	6809      	ldr	r1, [r1, #0]
 80051c4:	1d02      	adds	r2, r0, #4
 80051c6:	060d      	lsls	r5, r1, #24
 80051c8:	d50b      	bpl.n	80051e2 <_printf_i+0xa2>
 80051ca:	6806      	ldr	r6, [r0, #0]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	da03      	bge.n	80051da <_printf_i+0x9a>
 80051d2:	232d      	movs	r3, #45	@ 0x2d
 80051d4:	9a03      	ldr	r2, [sp, #12]
 80051d6:	4276      	negs	r6, r6
 80051d8:	7013      	strb	r3, [r2, #0]
 80051da:	4b5e      	ldr	r3, [pc, #376]	@ (8005354 <_printf_i+0x214>)
 80051dc:	270a      	movs	r7, #10
 80051de:	9304      	str	r3, [sp, #16]
 80051e0:	e018      	b.n	8005214 <_printf_i+0xd4>
 80051e2:	6806      	ldr	r6, [r0, #0]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	0649      	lsls	r1, r1, #25
 80051e8:	d5f1      	bpl.n	80051ce <_printf_i+0x8e>
 80051ea:	b236      	sxth	r6, r6
 80051ec:	e7ef      	b.n	80051ce <_printf_i+0x8e>
 80051ee:	6808      	ldr	r0, [r1, #0]
 80051f0:	6819      	ldr	r1, [r3, #0]
 80051f2:	c940      	ldmia	r1!, {r6}
 80051f4:	0605      	lsls	r5, r0, #24
 80051f6:	d402      	bmi.n	80051fe <_printf_i+0xbe>
 80051f8:	0640      	lsls	r0, r0, #25
 80051fa:	d500      	bpl.n	80051fe <_printf_i+0xbe>
 80051fc:	b2b6      	uxth	r6, r6
 80051fe:	6019      	str	r1, [r3, #0]
 8005200:	4b54      	ldr	r3, [pc, #336]	@ (8005354 <_printf_i+0x214>)
 8005202:	270a      	movs	r7, #10
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	2a6f      	cmp	r2, #111	@ 0x6f
 8005208:	d100      	bne.n	800520c <_printf_i+0xcc>
 800520a:	3f02      	subs	r7, #2
 800520c:	0023      	movs	r3, r4
 800520e:	2200      	movs	r2, #0
 8005210:	3343      	adds	r3, #67	@ 0x43
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	db03      	blt.n	8005224 <_printf_i+0xe4>
 800521c:	2104      	movs	r1, #4
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	438a      	bics	r2, r1
 8005222:	6022      	str	r2, [r4, #0]
 8005224:	2e00      	cmp	r6, #0
 8005226:	d102      	bne.n	800522e <_printf_i+0xee>
 8005228:	9d03      	ldr	r5, [sp, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <_printf_i+0x108>
 800522e:	9d03      	ldr	r5, [sp, #12]
 8005230:	0030      	movs	r0, r6
 8005232:	0039      	movs	r1, r7
 8005234:	f7fa fff4 	bl	8000220 <__aeabi_uidivmod>
 8005238:	9b04      	ldr	r3, [sp, #16]
 800523a:	3d01      	subs	r5, #1
 800523c:	5c5b      	ldrb	r3, [r3, r1]
 800523e:	702b      	strb	r3, [r5, #0]
 8005240:	0033      	movs	r3, r6
 8005242:	0006      	movs	r6, r0
 8005244:	429f      	cmp	r7, r3
 8005246:	d9f3      	bls.n	8005230 <_printf_i+0xf0>
 8005248:	2f08      	cmp	r7, #8
 800524a:	d109      	bne.n	8005260 <_printf_i+0x120>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	07db      	lsls	r3, r3, #31
 8005250:	d506      	bpl.n	8005260 <_printf_i+0x120>
 8005252:	6862      	ldr	r2, [r4, #4]
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	429a      	cmp	r2, r3
 8005258:	dc02      	bgt.n	8005260 <_printf_i+0x120>
 800525a:	2330      	movs	r3, #48	@ 0x30
 800525c:	3d01      	subs	r5, #1
 800525e:	702b      	strb	r3, [r5, #0]
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	1b5b      	subs	r3, r3, r5
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	9b07      	ldr	r3, [sp, #28]
 8005268:	0021      	movs	r1, r4
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	9805      	ldr	r0, [sp, #20]
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	aa09      	add	r2, sp, #36	@ 0x24
 8005272:	f7ff fef5 	bl	8005060 <_printf_common>
 8005276:	3001      	adds	r0, #1
 8005278:	d148      	bne.n	800530c <_printf_i+0x1cc>
 800527a:	2001      	movs	r0, #1
 800527c:	4240      	negs	r0, r0
 800527e:	b00b      	add	sp, #44	@ 0x2c
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005282:	2220      	movs	r2, #32
 8005284:	6809      	ldr	r1, [r1, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	6022      	str	r2, [r4, #0]
 800528a:	2278      	movs	r2, #120	@ 0x78
 800528c:	4932      	ldr	r1, [pc, #200]	@ (8005358 <_printf_i+0x218>)
 800528e:	9104      	str	r1, [sp, #16]
 8005290:	0021      	movs	r1, r4
 8005292:	3145      	adds	r1, #69	@ 0x45
 8005294:	700a      	strb	r2, [r1, #0]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	6822      	ldr	r2, [r4, #0]
 800529a:	c940      	ldmia	r1!, {r6}
 800529c:	0610      	lsls	r0, r2, #24
 800529e:	d402      	bmi.n	80052a6 <_printf_i+0x166>
 80052a0:	0650      	lsls	r0, r2, #25
 80052a2:	d500      	bpl.n	80052a6 <_printf_i+0x166>
 80052a4:	b2b6      	uxth	r6, r6
 80052a6:	6019      	str	r1, [r3, #0]
 80052a8:	07d3      	lsls	r3, r2, #31
 80052aa:	d502      	bpl.n	80052b2 <_printf_i+0x172>
 80052ac:	2320      	movs	r3, #32
 80052ae:	4313      	orrs	r3, r2
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	d001      	beq.n	80052ba <_printf_i+0x17a>
 80052b6:	2710      	movs	r7, #16
 80052b8:	e7a8      	b.n	800520c <_printf_i+0xcc>
 80052ba:	2220      	movs	r2, #32
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	4393      	bics	r3, r2
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	e7f8      	b.n	80052b6 <_printf_i+0x176>
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	680d      	ldr	r5, [r1, #0]
 80052c8:	1d10      	adds	r0, r2, #4
 80052ca:	6949      	ldr	r1, [r1, #20]
 80052cc:	6018      	str	r0, [r3, #0]
 80052ce:	6813      	ldr	r3, [r2, #0]
 80052d0:	062e      	lsls	r6, r5, #24
 80052d2:	d501      	bpl.n	80052d8 <_printf_i+0x198>
 80052d4:	6019      	str	r1, [r3, #0]
 80052d6:	e002      	b.n	80052de <_printf_i+0x19e>
 80052d8:	066d      	lsls	r5, r5, #25
 80052da:	d5fb      	bpl.n	80052d4 <_printf_i+0x194>
 80052dc:	8019      	strh	r1, [r3, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	9d03      	ldr	r5, [sp, #12]
 80052e2:	6123      	str	r3, [r4, #16]
 80052e4:	e7bf      	b.n	8005266 <_printf_i+0x126>
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	1d11      	adds	r1, r2, #4
 80052ea:	6019      	str	r1, [r3, #0]
 80052ec:	6815      	ldr	r5, [r2, #0]
 80052ee:	2100      	movs	r1, #0
 80052f0:	0028      	movs	r0, r5
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	f000 f858 	bl	80053a8 <memchr>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d001      	beq.n	8005300 <_printf_i+0x1c0>
 80052fc:	1b40      	subs	r0, r0, r5
 80052fe:	6060      	str	r0, [r4, #4]
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	2300      	movs	r3, #0
 8005306:	9a03      	ldr	r2, [sp, #12]
 8005308:	7013      	strb	r3, [r2, #0]
 800530a:	e7ac      	b.n	8005266 <_printf_i+0x126>
 800530c:	002a      	movs	r2, r5
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	9906      	ldr	r1, [sp, #24]
 8005312:	9805      	ldr	r0, [sp, #20]
 8005314:	9d07      	ldr	r5, [sp, #28]
 8005316:	47a8      	blx	r5
 8005318:	3001      	adds	r0, #1
 800531a:	d0ae      	beq.n	800527a <_printf_i+0x13a>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	079b      	lsls	r3, r3, #30
 8005320:	d415      	bmi.n	800534e <_printf_i+0x20e>
 8005322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005324:	68e0      	ldr	r0, [r4, #12]
 8005326:	4298      	cmp	r0, r3
 8005328:	daa9      	bge.n	800527e <_printf_i+0x13e>
 800532a:	0018      	movs	r0, r3
 800532c:	e7a7      	b.n	800527e <_printf_i+0x13e>
 800532e:	0022      	movs	r2, r4
 8005330:	2301      	movs	r3, #1
 8005332:	9906      	ldr	r1, [sp, #24]
 8005334:	9805      	ldr	r0, [sp, #20]
 8005336:	9e07      	ldr	r6, [sp, #28]
 8005338:	3219      	adds	r2, #25
 800533a:	47b0      	blx	r6
 800533c:	3001      	adds	r0, #1
 800533e:	d09c      	beq.n	800527a <_printf_i+0x13a>
 8005340:	3501      	adds	r5, #1
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dcf0      	bgt.n	800532e <_printf_i+0x1ee>
 800534c:	e7e9      	b.n	8005322 <_printf_i+0x1e2>
 800534e:	2500      	movs	r5, #0
 8005350:	e7f7      	b.n	8005342 <_printf_i+0x202>
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	0800590d 	.word	0x0800590d
 8005358:	0800591e 	.word	0x0800591e

0800535c <memmove>:
 800535c:	b510      	push	{r4, lr}
 800535e:	4288      	cmp	r0, r1
 8005360:	d806      	bhi.n	8005370 <memmove+0x14>
 8005362:	2300      	movs	r3, #0
 8005364:	429a      	cmp	r2, r3
 8005366:	d008      	beq.n	800537a <memmove+0x1e>
 8005368:	5ccc      	ldrb	r4, [r1, r3]
 800536a:	54c4      	strb	r4, [r0, r3]
 800536c:	3301      	adds	r3, #1
 800536e:	e7f9      	b.n	8005364 <memmove+0x8>
 8005370:	188b      	adds	r3, r1, r2
 8005372:	4298      	cmp	r0, r3
 8005374:	d2f5      	bcs.n	8005362 <memmove+0x6>
 8005376:	3a01      	subs	r2, #1
 8005378:	d200      	bcs.n	800537c <memmove+0x20>
 800537a:	bd10      	pop	{r4, pc}
 800537c:	5c8b      	ldrb	r3, [r1, r2]
 800537e:	5483      	strb	r3, [r0, r2]
 8005380:	e7f9      	b.n	8005376 <memmove+0x1a>
	...

08005384 <_sbrk_r>:
 8005384:	2300      	movs	r3, #0
 8005386:	b570      	push	{r4, r5, r6, lr}
 8005388:	4d06      	ldr	r5, [pc, #24]	@ (80053a4 <_sbrk_r+0x20>)
 800538a:	0004      	movs	r4, r0
 800538c:	0008      	movs	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fb fba2 	bl	8000ad8 <_sbrk>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d103      	bne.n	80053a0 <_sbrk_r+0x1c>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d000      	beq.n	80053a0 <_sbrk_r+0x1c>
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	200041e4 	.word	0x200041e4

080053a8 <memchr>:
 80053a8:	b2c9      	uxtb	r1, r1
 80053aa:	1882      	adds	r2, r0, r2
 80053ac:	4290      	cmp	r0, r2
 80053ae:	d101      	bne.n	80053b4 <memchr+0xc>
 80053b0:	2000      	movs	r0, #0
 80053b2:	4770      	bx	lr
 80053b4:	7803      	ldrb	r3, [r0, #0]
 80053b6:	428b      	cmp	r3, r1
 80053b8:	d0fb      	beq.n	80053b2 <memchr+0xa>
 80053ba:	3001      	adds	r0, #1
 80053bc:	e7f6      	b.n	80053ac <memchr+0x4>

080053be <memcpy>:
 80053be:	2300      	movs	r3, #0
 80053c0:	b510      	push	{r4, lr}
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d100      	bne.n	80053c8 <memcpy+0xa>
 80053c6:	bd10      	pop	{r4, pc}
 80053c8:	5ccc      	ldrb	r4, [r1, r3]
 80053ca:	54c4      	strb	r4, [r0, r3]
 80053cc:	3301      	adds	r3, #1
 80053ce:	e7f8      	b.n	80053c2 <memcpy+0x4>

080053d0 <_realloc_r>:
 80053d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d2:	0006      	movs	r6, r0
 80053d4:	000c      	movs	r4, r1
 80053d6:	0015      	movs	r5, r2
 80053d8:	2900      	cmp	r1, #0
 80053da:	d105      	bne.n	80053e8 <_realloc_r+0x18>
 80053dc:	0011      	movs	r1, r2
 80053de:	f7ff fc51 	bl	8004c84 <_malloc_r>
 80053e2:	0004      	movs	r4, r0
 80053e4:	0020      	movs	r0, r4
 80053e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053e8:	2a00      	cmp	r2, #0
 80053ea:	d103      	bne.n	80053f4 <_realloc_r+0x24>
 80053ec:	f7ff fbde 	bl	8004bac <_free_r>
 80053f0:	2400      	movs	r4, #0
 80053f2:	e7f7      	b.n	80053e4 <_realloc_r+0x14>
 80053f4:	f000 f81b 	bl	800542e <_malloc_usable_size_r>
 80053f8:	0007      	movs	r7, r0
 80053fa:	4285      	cmp	r5, r0
 80053fc:	d802      	bhi.n	8005404 <_realloc_r+0x34>
 80053fe:	0843      	lsrs	r3, r0, #1
 8005400:	42ab      	cmp	r3, r5
 8005402:	d3ef      	bcc.n	80053e4 <_realloc_r+0x14>
 8005404:	0029      	movs	r1, r5
 8005406:	0030      	movs	r0, r6
 8005408:	f7ff fc3c 	bl	8004c84 <_malloc_r>
 800540c:	9001      	str	r0, [sp, #4]
 800540e:	2800      	cmp	r0, #0
 8005410:	d0ee      	beq.n	80053f0 <_realloc_r+0x20>
 8005412:	002a      	movs	r2, r5
 8005414:	42bd      	cmp	r5, r7
 8005416:	d900      	bls.n	800541a <_realloc_r+0x4a>
 8005418:	003a      	movs	r2, r7
 800541a:	0021      	movs	r1, r4
 800541c:	9801      	ldr	r0, [sp, #4]
 800541e:	f7ff ffce 	bl	80053be <memcpy>
 8005422:	0021      	movs	r1, r4
 8005424:	0030      	movs	r0, r6
 8005426:	f7ff fbc1 	bl	8004bac <_free_r>
 800542a:	9c01      	ldr	r4, [sp, #4]
 800542c:	e7da      	b.n	80053e4 <_realloc_r+0x14>

0800542e <_malloc_usable_size_r>:
 800542e:	1f0b      	subs	r3, r1, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	1f18      	subs	r0, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	da01      	bge.n	800543c <_malloc_usable_size_r+0xe>
 8005438:	580b      	ldr	r3, [r1, r0]
 800543a:	18c0      	adds	r0, r0, r3
 800543c:	4770      	bx	lr
	...

08005440 <_init>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	46c0      	nop			@ (mov r8, r8)
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr

0800544c <_fini>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr
